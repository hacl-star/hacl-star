module Spec.GCM.Test

#reset-options "--z3rlimit 100 --initial_fuel 0 --max_fuel 0 --initial_ifuel 0"

open FStar.Mul
open Spec.Lib.IntTypes
open Spec.Lib.RawIntTypes
open Spec.Lib.IntSeq
open Spec.Lib.Stateful

module GCM = Spec.GCM

let key_length = 16
let ghash_length = 16

let test1_hash_key = List.Tot.map u8_from_UInt8 [
0x66uy; 0xe9uy; 0x4buy; 0xd4uy; 0xefuy; 0x8auy; 0x2cuy; 0x3buy; 0x88uy; 0x4cuy; 0xfauy; 0x59uy; 0xcauy; 0x34uy; 0x2buy; 0x2euy
]

let test1_aad = List.Tot.map u8_from_UInt8 [

]

let test1_ciphertext = List.Tot.map u8_from_UInt8 [

]

let test1_expected = List.Tot.map u8_from_UInt8 [
0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy
]

let test1_c_length: size_nat = 0
let test1_aad_length: size_nat = 0

let test2_hash_key = List.Tot.map u8_from_UInt8 [
0x66uy; 0xe9uy; 0x4buy; 0xd4uy; 0xefuy; 0x8auy; 0x2cuy; 0x3buy; 0x88uy; 0x4cuy; 0xfauy; 0x59uy; 0xcauy; 0x34uy; 0x2buy; 0x2euy
]

let test2_aad = List.Tot.map u8_from_UInt8 [

]

let test2_ciphertext = List.Tot.map u8_from_UInt8 [
0x03uy; 0x88uy; 0xdauy; 0xceuy; 0x60uy; 0xb6uy; 0xa3uy; 0x92uy; 0xf3uy; 0x28uy; 0xc2uy; 0xb9uy; 0x71uy; 0xb2uy; 0xfeuy; 0x78uy
]

let test2_expected = List.Tot.map u8_from_UInt8 [
0xf3uy; 0x8cuy; 0xbbuy; 0x1auy; 0xd6uy; 0x92uy; 0x23uy; 0xdcuy; 0xc3uy; 0x45uy; 0x7auy; 0xe5uy; 0xb6uy; 0xb0uy; 0xf8uy; 0x85uy
]

let test2_c_length: size_nat = 16
let test2_aad_length: size_nat = 0

let test3_hash_key = List.Tot.map u8_from_UInt8 [
0xb8uy; 0x3buy; 0x53uy; 0x37uy; 0x08uy; 0xbfuy; 0x53uy; 0x5duy; 0x0auy; 0xa6uy; 0xe5uy; 0x29uy; 0x80uy; 0xd5uy; 0x3buy; 0x78uy
]

let test3_aad = List.Tot.map u8_from_UInt8 [

]

let test3_ciphertext = List.Tot.map u8_from_UInt8 [
0x42uy; 0x83uy; 0x1euy; 0xc2uy; 0x21uy; 0x77uy; 0x74uy; 0x24uy; 0x4buy; 0x72uy; 0x21uy; 0xb7uy; 0x84uy; 0xd0uy; 0xd4uy; 0x9cuy; 0xe3uy; 0xaauy; 0x21uy; 0x2fuy; 0x2cuy; 0x02uy; 0xa4uy; 0xe0uy; 0x35uy; 0xc1uy; 0x7euy; 0x23uy; 0x29uy; 0xacuy; 0xa1uy; 0x2euy; 0x21uy; 0xd5uy; 0x14uy; 0xb2uy; 0x54uy; 0x66uy; 0x93uy; 0x1cuy; 0x7duy; 0x8fuy; 0x6auy; 0x5auy; 0xacuy; 0x84uy; 0xaauy; 0x05uy; 0x1buy; 0xa3uy; 0x0buy; 0x39uy; 0x6auy; 0x0auy; 0xacuy; 0x97uy; 0x3duy; 0x58uy; 0xe0uy; 0x91uy; 0x47uy; 0x3fuy; 0x59uy; 0x85uy
]

let test3_expected = List.Tot.map u8_from_UInt8 [
0x7fuy; 0x1buy; 0x32uy; 0xb8uy; 0x1buy; 0x82uy; 0x0duy; 0x02uy; 0x61uy; 0x4fuy; 0x88uy; 0x95uy; 0xacuy; 0x1duy; 0x4euy; 0xacuy
]

let test3_c_length: size_nat = 64
let test3_aad_length: size_nat = 0

let test4_hash_key = List.Tot.map u8_from_UInt8 [
0xb8uy; 0x3buy; 0x53uy; 0x37uy; 0x08uy; 0xbfuy; 0x53uy; 0x5duy; 0x0auy; 0xa6uy; 0xe5uy; 0x29uy; 0x80uy; 0xd5uy; 0x3buy; 0x78uy
]

let test4_aad = List.Tot.map u8_from_UInt8 [
0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xabuy; 0xaduy; 0xdauy; 0xd2uy
]

let test4_ciphertext = List.Tot.map u8_from_UInt8 [
0x42uy; 0x83uy; 0x1euy; 0xc2uy; 0x21uy; 0x77uy; 0x74uy; 0x24uy; 0x4buy; 0x72uy; 0x21uy; 0xb7uy; 0x84uy; 0xd0uy; 0xd4uy; 0x9cuy; 0xe3uy; 0xaauy; 0x21uy; 0x2fuy; 0x2cuy; 0x02uy; 0xa4uy; 0xe0uy; 0x35uy; 0xc1uy; 0x7euy; 0x23uy; 0x29uy; 0xacuy; 0xa1uy; 0x2euy; 0x21uy; 0xd5uy; 0x14uy; 0xb2uy; 0x54uy; 0x66uy; 0x93uy; 0x1cuy; 0x7duy; 0x8fuy; 0x6auy; 0x5auy; 0xacuy; 0x84uy; 0xaauy; 0x05uy; 0x1buy; 0xa3uy; 0x0buy; 0x39uy; 0x6auy; 0x0auy; 0xacuy; 0x97uy; 0x3duy; 0x58uy; 0xe0uy; 0x91uy
]

let test4_expected = List.Tot.map u8_from_UInt8 [
0x69uy; 0x8euy; 0x57uy; 0xf7uy; 0x0euy; 0x6euy; 0xccuy; 0x7fuy; 0xd9uy; 0x46uy; 0x3buy; 0x72uy; 0x60uy; 0xa9uy; 0xaeuy; 0x5fuy
]

let test4_c_length: size_nat = 60
let test4_aad_length: size_nat = 20

let test5_hash_key = List.Tot.map u8_from_UInt8 [
0xb8uy; 0x3buy; 0x53uy; 0x37uy; 0x08uy; 0xbfuy; 0x53uy; 0x5duy; 0x0auy; 0xa6uy; 0xe5uy; 0x29uy; 0x80uy; 0xd5uy; 0x3buy; 0x78uy
]

let test5_aad = List.Tot.map u8_from_UInt8 [
0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xabuy; 0xaduy; 0xdauy; 0xd2uy
]

let test5_ciphertext = List.Tot.map u8_from_UInt8 [
0x61uy; 0x35uy; 0x3buy; 0x4cuy; 0x28uy; 0x06uy; 0x93uy; 0x4auy; 0x77uy; 0x7fuy; 0xf5uy; 0x1fuy; 0xa2uy; 0x2auy; 0x47uy; 0x55uy; 0x69uy; 0x9buy; 0x2auy; 0x71uy; 0x4fuy; 0xcduy; 0xc6uy; 0xf8uy; 0x37uy; 0x66uy; 0xe5uy; 0xf9uy; 0x7buy; 0x6cuy; 0x74uy; 0x23uy; 0x73uy; 0x80uy; 0x69uy; 0x00uy; 0xe4uy; 0x9fuy; 0x24uy; 0xb2uy; 0x2buy; 0x09uy; 0x75uy; 0x44uy; 0xd4uy; 0x89uy; 0x6buy; 0x42uy; 0x49uy; 0x89uy; 0xb5uy; 0xe1uy; 0xebuy; 0xacuy; 0x0fuy; 0x07uy; 0xc2uy; 0x3fuy; 0x45uy; 0x98uy
]

let test5_expected = List.Tot.map u8_from_UInt8 [
0xdfuy; 0x58uy; 0x6buy; 0xb4uy; 0xc2uy; 0x49uy; 0xb9uy; 0x2cuy; 0xb6uy; 0x92uy; 0x28uy; 0x77uy; 0xe4uy; 0x44uy; 0xd3uy; 0x7buy
]

let test5_c_length: size_nat = 60
let test5_aad_length: size_nat = 20

let test6_hash_key = List.Tot.map u8_from_UInt8 [
0xb8uy; 0x3buy; 0x53uy; 0x37uy; 0x08uy; 0xbfuy; 0x53uy; 0x5duy; 0x0auy; 0xa6uy; 0xe5uy; 0x29uy; 0x80uy; 0xd5uy; 0x3buy; 0x78uy
]

let test6_aad = List.Tot.map u8_from_UInt8 [
0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xabuy; 0xaduy; 0xdauy; 0xd2uy
]

let test6_ciphertext = List.Tot.map u8_from_UInt8 [
0x8cuy; 0xe2uy; 0x49uy; 0x98uy; 0x62uy; 0x56uy; 0x15uy; 0xb6uy; 0x03uy; 0xa0uy; 0x33uy; 0xacuy; 0xa1uy; 0x3fuy; 0xb8uy; 0x94uy; 0xbeuy; 0x91uy; 0x12uy; 0xa5uy; 0xc3uy; 0xa2uy; 0x11uy; 0xa8uy; 0xbauy; 0x26uy; 0x2auy; 0x3cuy; 0xcauy; 0x7euy; 0x2cuy; 0xa7uy; 0x01uy; 0xe4uy; 0xa9uy; 0xa4uy; 0xfbuy; 0xa4uy; 0x3cuy; 0x90uy; 0xccuy; 0xdcuy; 0xb2uy; 0x81uy; 0xd4uy; 0x8cuy; 0x7cuy; 0x6fuy; 0xd6uy; 0x28uy; 0x75uy; 0xd2uy; 0xacuy; 0xa4uy; 0x17uy; 0x03uy; 0x4cuy; 0x34uy; 0xaeuy; 0xe5uy
]

let test6_expected = List.Tot.map u8_from_UInt8 [
0x1cuy; 0x5auy; 0xfeuy; 0x97uy; 0x60uy; 0xd3uy; 0x93uy; 0x2fuy; 0x3cuy; 0x9auy; 0x87uy; 0x8auy; 0xacuy; 0x3duy; 0xc3uy; 0xdeuy
]

let test6_c_length: size_nat = 60
let test6_aad_length: size_nat = 20

let test7_hash_key = List.Tot.map u8_from_UInt8 [
0xaauy; 0xe0uy; 0x69uy; 0x92uy; 0xacuy; 0xbfuy; 0x52uy; 0xa3uy; 0xe8uy; 0xf4uy; 0xa9uy; 0x6euy; 0xc9uy; 0x30uy; 0x0buy; 0xd7uy
]

let test7_aad = List.Tot.map u8_from_UInt8 [

]

let test7_ciphertext = List.Tot.map u8_from_UInt8 [

]

let test7_expected = List.Tot.map u8_from_UInt8 [
0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy
]

let test7_c_length: size_nat = 0
let test7_aad_length: size_nat = 0

let test8_hash_key = List.Tot.map u8_from_UInt8 [
0xaauy; 0xe0uy; 0x69uy; 0x92uy; 0xacuy; 0xbfuy; 0x52uy; 0xa3uy; 0xe8uy; 0xf4uy; 0xa9uy; 0x6euy; 0xc9uy; 0x30uy; 0x0buy; 0xd7uy
]

let test8_aad = List.Tot.map u8_from_UInt8 [

]

let test8_ciphertext = List.Tot.map u8_from_UInt8 [
0x98uy; 0xe7uy; 0x24uy; 0x7cuy; 0x07uy; 0xf0uy; 0xfeuy; 0x41uy; 0x1cuy; 0x26uy; 0x7euy; 0x43uy; 0x84uy; 0xb0uy; 0xf6uy; 0x00uy
]

let test8_expected = List.Tot.map u8_from_UInt8 [
0xe2uy; 0xc6uy; 0x3fuy; 0x0auy; 0xc4uy; 0x4auy; 0xd0uy; 0xe0uy; 0x2euy; 0xfauy; 0x05uy; 0xabuy; 0x67uy; 0x43uy; 0xd4uy; 0xceuy
]

let test8_c_length: size_nat = 16
let test8_aad_length: size_nat = 0

let test9_hash_key = List.Tot.map u8_from_UInt8 [
0x46uy; 0x69uy; 0x23uy; 0xecuy; 0x9auy; 0xe6uy; 0x82uy; 0x21uy; 0x4fuy; 0x2cuy; 0x08uy; 0x2buy; 0xaduy; 0xb3uy; 0x92uy; 0x49uy
]

let test9_aad = List.Tot.map u8_from_UInt8 [

]

let test9_ciphertext = List.Tot.map u8_from_UInt8 [
0x39uy; 0x80uy; 0xcauy; 0x0buy; 0x3cuy; 0x00uy; 0xe8uy; 0x41uy; 0xebuy; 0x06uy; 0xfauy; 0xc4uy; 0x87uy; 0x2auy; 0x27uy; 0x57uy; 0x85uy; 0x9euy; 0x1cuy; 0xeauy; 0xa6uy; 0xefuy; 0xd9uy; 0x84uy; 0x62uy; 0x85uy; 0x93uy; 0xb4uy; 0x0cuy; 0xa1uy; 0xe1uy; 0x9cuy; 0x7duy; 0x77uy; 0x3duy; 0x00uy; 0xc1uy; 0x44uy; 0xc5uy; 0x25uy; 0xacuy; 0x61uy; 0x9duy; 0x18uy; 0xc8uy; 0x4auy; 0x3fuy; 0x47uy; 0x18uy; 0xe2uy; 0x44uy; 0x8buy; 0x2fuy; 0xe3uy; 0x24uy; 0xd9uy; 0xccuy; 0xdauy; 0x27uy; 0x10uy; 0xacuy; 0xaduy; 0xe2uy; 0x56uy
]

let test9_expected = List.Tot.map u8_from_UInt8 [
0x51uy; 0x11uy; 0x0duy; 0x40uy; 0xf6uy; 0xc8uy; 0xffuy; 0xf0uy; 0xebuy; 0x1auy; 0xe3uy; 0x34uy; 0x45uy; 0xa8uy; 0x89uy; 0xf0uy
]

let test9_c_length: size_nat = 64
let test9_aad_length: size_nat = 0

let test10_hash_key = List.Tot.map u8_from_UInt8 [
0x46uy; 0x69uy; 0x23uy; 0xecuy; 0x9auy; 0xe6uy; 0x82uy; 0x21uy; 0x4fuy; 0x2cuy; 0x08uy; 0x2buy; 0xaduy; 0xb3uy; 0x92uy; 0x49uy
]

let test10_aad = List.Tot.map u8_from_UInt8 [
0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xabuy; 0xaduy; 0xdauy; 0xd2uy
]

let test10_ciphertext = List.Tot.map u8_from_UInt8 [
0x39uy; 0x80uy; 0xcauy; 0x0buy; 0x3cuy; 0x00uy; 0xe8uy; 0x41uy; 0xebuy; 0x06uy; 0xfauy; 0xc4uy; 0x87uy; 0x2auy; 0x27uy; 0x57uy; 0x85uy; 0x9euy; 0x1cuy; 0xeauy; 0xa6uy; 0xefuy; 0xd9uy; 0x84uy; 0x62uy; 0x85uy; 0x93uy; 0xb4uy; 0x0cuy; 0xa1uy; 0xe1uy; 0x9cuy; 0x7duy; 0x77uy; 0x3duy; 0x00uy; 0xc1uy; 0x44uy; 0xc5uy; 0x25uy; 0xacuy; 0x61uy; 0x9duy; 0x18uy; 0xc8uy; 0x4auy; 0x3fuy; 0x47uy; 0x18uy; 0xe2uy; 0x44uy; 0x8buy; 0x2fuy; 0xe3uy; 0x24uy; 0xd9uy; 0xccuy; 0xdauy; 0x27uy; 0x10uy
]

let test10_expected = List.Tot.map u8_from_UInt8 [
0xeduy; 0x2cuy; 0xe3uy; 0x06uy; 0x2euy; 0x4auy; 0x8euy; 0xc0uy; 0x6duy; 0xb8uy; 0xb4uy; 0xc4uy; 0x90uy; 0xe8uy; 0xa2uy; 0x68uy
]

let test10_c_length: size_nat = 60
let test10_aad_length: size_nat = 20

let test11_hash_key = List.Tot.map u8_from_UInt8 [
0x46uy; 0x69uy; 0x23uy; 0xecuy; 0x9auy; 0xe6uy; 0x82uy; 0x21uy; 0x4fuy; 0x2cuy; 0x08uy; 0x2buy; 0xaduy; 0xb3uy; 0x92uy; 0x49uy
]

let test11_aad = List.Tot.map u8_from_UInt8 [
0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xabuy; 0xaduy; 0xdauy; 0xd2uy
]

let test11_ciphertext = List.Tot.map u8_from_UInt8 [
0x0fuy; 0x10uy; 0xf5uy; 0x99uy; 0xaeuy; 0x14uy; 0xa1uy; 0x54uy; 0xeduy; 0x24uy; 0xb3uy; 0x6euy; 0x25uy; 0x32uy; 0x4duy; 0xb8uy; 0xc5uy; 0x66uy; 0x63uy; 0x2euy; 0xf2uy; 0xbbuy; 0xb3uy; 0x4fuy; 0x83uy; 0x47uy; 0x28uy; 0x0fuy; 0xc4uy; 0x50uy; 0x70uy; 0x57uy; 0xfduy; 0xdcuy; 0x29uy; 0xdfuy; 0x9auy; 0x47uy; 0x1fuy; 0x75uy; 0xc6uy; 0x65uy; 0x41uy; 0xd4uy; 0xd4uy; 0xdauy; 0xd1uy; 0xc9uy; 0xe9uy; 0x3auy; 0x19uy; 0xa5uy; 0x8euy; 0x8buy; 0x47uy; 0x3fuy; 0xa0uy; 0xf0uy; 0x62uy; 0xf7uy
]

let test11_expected = List.Tot.map u8_from_UInt8 [
0x1euy; 0x6auy; 0x13uy; 0x38uy; 0x06uy; 0x60uy; 0x78uy; 0x58uy; 0xeeuy; 0x80uy; 0xeauy; 0xf2uy; 0x37uy; 0x06uy; 0x40uy; 0x89uy
]

let test11_c_length: size_nat = 60
let test11_aad_length: size_nat = 20

let test12_hash_key = List.Tot.map u8_from_UInt8 [
0x46uy; 0x69uy; 0x23uy; 0xecuy; 0x9auy; 0xe6uy; 0x82uy; 0x21uy; 0x4fuy; 0x2cuy; 0x08uy; 0x2buy; 0xaduy; 0xb3uy; 0x92uy; 0x49uy
]

let test12_aad = List.Tot.map u8_from_UInt8 [
0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xabuy; 0xaduy; 0xdauy; 0xd2uy
]

let test12_ciphertext = List.Tot.map u8_from_UInt8 [
0xd2uy; 0x7euy; 0x88uy; 0x68uy; 0x1cuy; 0xe3uy; 0x24uy; 0x3cuy; 0x48uy; 0x30uy; 0x16uy; 0x5auy; 0x8fuy; 0xdcuy; 0xf9uy; 0xffuy; 0x1duy; 0xe9uy; 0xa1uy; 0xd8uy; 0xe6uy; 0xb4uy; 0x47uy; 0xefuy; 0x6euy; 0xf7uy; 0xb7uy; 0x98uy; 0x28uy; 0x66uy; 0x6euy; 0x45uy; 0x81uy; 0xe7uy; 0x90uy; 0x12uy; 0xafuy; 0x34uy; 0xdduy; 0xd9uy; 0xe2uy; 0xf0uy; 0x37uy; 0x58uy; 0x9buy; 0x29uy; 0x2duy; 0xb3uy; 0xe6uy; 0x7cuy; 0x03uy; 0x67uy; 0x45uy; 0xfauy; 0x22uy; 0xe7uy; 0xe9uy; 0xb7uy; 0x37uy; 0x3buy
]

let test12_expected = List.Tot.map u8_from_UInt8 [
0x82uy; 0x56uy; 0x7fuy; 0xb0uy; 0xb4uy; 0xccuy; 0x37uy; 0x18uy; 0x01uy; 0xeauy; 0xdeuy; 0xc0uy; 0x05uy; 0x96uy; 0x8euy; 0x94uy
]

let test12_c_length: size_nat = 60
let test12_aad_length: size_nat = 20

let test13_hash_key = List.Tot.map u8_from_UInt8 [
0xdcuy; 0x95uy; 0xc0uy; 0x78uy; 0xa2uy; 0x40uy; 0x89uy; 0x89uy; 0xaduy; 0x48uy; 0xa2uy; 0x14uy; 0x92uy; 0x84uy; 0x20uy; 0x87uy
]

let test13_aad = List.Tot.map u8_from_UInt8 [

]

let test13_ciphertext = List.Tot.map u8_from_UInt8 [

]

let test13_expected = List.Tot.map u8_from_UInt8 [
0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy
]

let test13_c_length: size_nat = 0
let test13_aad_length: size_nat = 0

let test14_hash_key = List.Tot.map u8_from_UInt8 [
0xdcuy; 0x95uy; 0xc0uy; 0x78uy; 0xa2uy; 0x40uy; 0x89uy; 0x89uy; 0xaduy; 0x48uy; 0xa2uy; 0x14uy; 0x92uy; 0x84uy; 0x20uy; 0x87uy
]

let test14_aad = List.Tot.map u8_from_UInt8 [

]

let test14_ciphertext = List.Tot.map u8_from_UInt8 [
0xceuy; 0xa7uy; 0x40uy; 0x3duy; 0x4duy; 0x60uy; 0x6buy; 0x6euy; 0x07uy; 0x4euy; 0xc5uy; 0xd3uy; 0xbauy; 0xf3uy; 0x9duy; 0x18uy
]

let test14_expected = List.Tot.map u8_from_UInt8 [
0x83uy; 0xdeuy; 0x42uy; 0x5cuy; 0x5euy; 0xdcuy; 0x5duy; 0x49uy; 0x8fuy; 0x38uy; 0x2cuy; 0x44uy; 0x10uy; 0x41uy; 0xcauy; 0x92uy
]

let test14_c_length: size_nat = 16
let test14_aad_length: size_nat = 0

let test15_hash_key = List.Tot.map u8_from_UInt8 [
0xacuy; 0xbeuy; 0xf2uy; 0x05uy; 0x79uy; 0xb4uy; 0xb8uy; 0xebuy; 0xceuy; 0x88uy; 0x9buy; 0xacuy; 0x87uy; 0x32uy; 0xdauy; 0xd7uy
]

let test15_aad = List.Tot.map u8_from_UInt8 [

]

let test15_ciphertext = List.Tot.map u8_from_UInt8 [
0x52uy; 0x2duy; 0xc1uy; 0xf0uy; 0x99uy; 0x56uy; 0x7duy; 0x07uy; 0xf4uy; 0x7fuy; 0x37uy; 0xa3uy; 0x2auy; 0x84uy; 0x42uy; 0x7duy; 0x64uy; 0x3auy; 0x8cuy; 0xdcuy; 0xbfuy; 0xe5uy; 0xc0uy; 0xc9uy; 0x75uy; 0x98uy; 0xa2uy; 0xbduy; 0x25uy; 0x55uy; 0xd1uy; 0xaauy; 0x8cuy; 0xb0uy; 0x8euy; 0x48uy; 0x59uy; 0x0duy; 0xbbuy; 0x3duy; 0xa7uy; 0xb0uy; 0x8buy; 0x10uy; 0x56uy; 0x82uy; 0x88uy; 0x38uy; 0xc5uy; 0xf6uy; 0x1euy; 0x63uy; 0x93uy; 0xbauy; 0x7auy; 0x0auy; 0xbcuy; 0xc9uy; 0xf6uy; 0x62uy; 0x89uy; 0x80uy; 0x15uy; 0xaduy
]

let test15_expected = List.Tot.map u8_from_UInt8 [
0x4duy; 0xb8uy; 0x70uy; 0xd3uy; 0x7cuy; 0xb7uy; 0x5fuy; 0xcbuy; 0x46uy; 0x09uy; 0x7cuy; 0x36uy; 0x23uy; 0x0duy; 0x16uy; 0x12uy
]

let test15_c_length: size_nat = 64
let test15_aad_length: size_nat = 0

let test16_hash_key = List.Tot.map u8_from_UInt8 [
0xacuy; 0xbeuy; 0xf2uy; 0x05uy; 0x79uy; 0xb4uy; 0xb8uy; 0xebuy; 0xceuy; 0x88uy; 0x9buy; 0xacuy; 0x87uy; 0x32uy; 0xdauy; 0xd7uy
]

let test16_aad = List.Tot.map u8_from_UInt8 [
0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xabuy; 0xaduy; 0xdauy; 0xd2uy
]

let test16_ciphertext = List.Tot.map u8_from_UInt8 [
0x52uy; 0x2duy; 0xc1uy; 0xf0uy; 0x99uy; 0x56uy; 0x7duy; 0x07uy; 0xf4uy; 0x7fuy; 0x37uy; 0xa3uy; 0x2auy; 0x84uy; 0x42uy; 0x7duy; 0x64uy; 0x3auy; 0x8cuy; 0xdcuy; 0xbfuy; 0xe5uy; 0xc0uy; 0xc9uy; 0x75uy; 0x98uy; 0xa2uy; 0xbduy; 0x25uy; 0x55uy; 0xd1uy; 0xaauy; 0x8cuy; 0xb0uy; 0x8euy; 0x48uy; 0x59uy; 0x0duy; 0xbbuy; 0x3duy; 0xa7uy; 0xb0uy; 0x8buy; 0x10uy; 0x56uy; 0x82uy; 0x88uy; 0x38uy; 0xc5uy; 0xf6uy; 0x1euy; 0x63uy; 0x93uy; 0xbauy; 0x7auy; 0x0auy; 0xbcuy; 0xc9uy; 0xf6uy; 0x62uy
]

let test16_expected = List.Tot.map u8_from_UInt8 [
0x8buy; 0xd0uy; 0xc4uy; 0xd8uy; 0xaauy; 0xcduy; 0x39uy; 0x1euy; 0x67uy; 0xccuy; 0xa4uy; 0x47uy; 0xe8uy; 0xc3uy; 0x8fuy; 0x65uy
]

let test16_c_length: size_nat = 60
let test16_aad_length: size_nat = 20

let test17_hash_key = List.Tot.map u8_from_UInt8 [
0xacuy; 0xbeuy; 0xf2uy; 0x05uy; 0x79uy; 0xb4uy; 0xb8uy; 0xebuy; 0xceuy; 0x88uy; 0x9buy; 0xacuy; 0x87uy; 0x32uy; 0xdauy; 0xd7uy
]

let test17_aad = List.Tot.map u8_from_UInt8 [
0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xabuy; 0xaduy; 0xdauy; 0xd2uy
]

let test17_ciphertext = List.Tot.map u8_from_UInt8 [
0xc3uy; 0x76uy; 0x2duy; 0xf1uy; 0xcauy; 0x78uy; 0x7duy; 0x32uy; 0xaeuy; 0x47uy; 0xc1uy; 0x3buy; 0xf1uy; 0x98uy; 0x44uy; 0xcbuy; 0xafuy; 0x1auy; 0xe1uy; 0x4duy; 0x0buy; 0x97uy; 0x6auy; 0xfauy; 0xc5uy; 0x2fuy; 0xf7uy; 0xd7uy; 0x9buy; 0xbauy; 0x9duy; 0xe0uy; 0xfeuy; 0xb5uy; 0x82uy; 0xd3uy; 0x39uy; 0x34uy; 0xa4uy; 0xf0uy; 0x95uy; 0x4cuy; 0xc2uy; 0x36uy; 0x3buy; 0xc7uy; 0x3fuy; 0x78uy; 0x62uy; 0xacuy; 0x43uy; 0x0euy; 0x64uy; 0xabuy; 0xe4uy; 0x99uy; 0xf4uy; 0x7cuy; 0x9buy; 0x1fuy
]

let test17_expected = List.Tot.map u8_from_UInt8 [
0x75uy; 0xa3uy; 0x42uy; 0x88uy; 0xb8uy; 0xc6uy; 0x8fuy; 0x81uy; 0x1cuy; 0x52uy; 0xb2uy; 0xe9uy; 0xa2uy; 0xf9uy; 0x7fuy; 0x63uy
]

let test17_c_length: size_nat = 60
let test17_aad_length: size_nat = 20

let test18_hash_key = List.Tot.map u8_from_UInt8 [
0xacuy; 0xbeuy; 0xf2uy; 0x05uy; 0x79uy; 0xb4uy; 0xb8uy; 0xebuy; 0xceuy; 0x88uy; 0x9buy; 0xacuy; 0x87uy; 0x32uy; 0xdauy; 0xd7uy
]

let test18_aad = List.Tot.map u8_from_UInt8 [
0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xabuy; 0xaduy; 0xdauy; 0xd2uy
]

let test18_ciphertext = List.Tot.map u8_from_UInt8 [
0x5auy; 0x8duy; 0xefuy; 0x2fuy; 0x0cuy; 0x9euy; 0x53uy; 0xf1uy; 0xf7uy; 0x5duy; 0x78uy; 0x53uy; 0x65uy; 0x9euy; 0x2auy; 0x20uy; 0xeeuy; 0xb2uy; 0xb2uy; 0x2auy; 0xafuy; 0xdeuy; 0x64uy; 0x19uy; 0xa0uy; 0x58uy; 0xabuy; 0x4fuy; 0x6fuy; 0x74uy; 0x6buy; 0xf4uy; 0x0fuy; 0xc0uy; 0xc3uy; 0xb7uy; 0x80uy; 0xf2uy; 0x44uy; 0x45uy; 0x2duy; 0xa3uy; 0xebuy; 0xf1uy; 0xc5uy; 0xd8uy; 0x2cuy; 0xdeuy; 0xa2uy; 0x41uy; 0x89uy; 0x97uy; 0x20uy; 0x0euy; 0xf8uy; 0x2euy; 0x44uy; 0xaeuy; 0x7euy; 0x3fuy
]

let test18_expected = List.Tot.map u8_from_UInt8 [
0xd5uy; 0xffuy; 0xcfuy; 0x6fuy; 0xc5uy; 0xacuy; 0x4duy; 0x69uy; 0x72uy; 0x21uy; 0x87uy; 0x42uy; 0x1auy; 0x7fuy; 0x17uy; 0x0buy
]

let test18_c_length: size_nat = 60
let test18_aad_length: size_nat = 20

let test19_hash_key = List.Tot.map u8_from_UInt8 [
0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0xfcuy; 0xefuy; 0xefuy; 0x64uy; 0xffuy; 0xc4uy; 0x76uy; 0x6cuy
]

let test19_aad = List.Tot.map u8_from_UInt8 [

]

let test19_ciphertext = List.Tot.map u8_from_UInt8 [
0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0xffuy; 0xceuy; 0xf9uy; 0xebuy; 0xbfuy; 0xfduy; 0xbduy; 0x8buy
]

let test19_expected = List.Tot.map u8_from_UInt8 [
0x35uy; 0x61uy; 0xe3uy; 0x4euy; 0x52uy; 0xd8uy; 0xb5uy; 0x98uy; 0xf9uy; 0x93uy; 0x79uy; 0x82uy; 0x51uy; 0x2fuy; 0xffuy; 0x27uy
]

let test19_c_length: size_nat = 16
let test19_aad_length: size_nat = 0

val test_v:
  expected:lbytes ghash_length ->
  text_len:size_nat ->
  text:lbytes text_len ->
  aad_len:size_nat ->
  aad:lbytes aad_len ->
  k:lbytes key_length ->
  FStar.All.ML unit
let test_v expected text_len text aad_len aad k =
  let output = GCM.ghash text_len text aad_len aad k in
  let result = for_all2 (fun a b -> uint_to_nat #U8 a = uint_to_nat #U8 b) output expected in
  IO.print_string   "Expected tag: ";
  let test_expected : lbytes key_length = createL expected in
  List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a));  IO.print_string ":") (as_list test_expected);
  IO.print_string "\nComputed tag: ";
  List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a));  IO.print_string ":") (as_list output);
  if result then IO.print_string "\nSuccess!\n"
  else IO.print_string "\nFailure :(\n"

let test () =
  test_v test1_expected test1_c_length test1_ciphertext test1_aad_length test1_aad test1_hash_key;
  test_v test2_expected test2_c_length test2_ciphertext test2_aad_length test2_aad test2_hash_key;
  test_v test3_expected test3_c_length test3_ciphertext test3_aad_length test3_aad test3_hash_key;
  test_v test4_expected test4_c_length test4_ciphertext test4_aad_length test4_aad test4_hash_key;
  test_v test5_expected test5_c_length test5_ciphertext test5_aad_length test5_aad test5_hash_key;
  test_v test6_expected test6_c_length test6_ciphertext test6_aad_length test6_aad test6_hash_key;
  test_v test7_expected test7_c_length test7_ciphertext test7_aad_length test7_aad test7_hash_key;
  test_v test8_expected test8_c_length test8_ciphertext test8_aad_length test8_aad test8_hash_key;
  test_v test9_expected test9_c_length test9_ciphertext test9_aad_length test9_aad test9_hash_key;
  test_v test10_expected test10_c_length test10_ciphertext test10_aad_length test10_aad test10_hash_key;
  test_v test11_expected test11_c_length test11_ciphertext test11_aad_length test11_aad test11_hash_key;
  test_v test12_expected test12_c_length test12_ciphertext test12_aad_length test12_aad test12_hash_key;
  test_v test13_expected test13_c_length test13_ciphertext test13_aad_length test13_aad test13_hash_key;
  test_v test14_expected test14_c_length test14_ciphertext test14_aad_length test14_aad test14_hash_key;
  test_v test15_expected test15_c_length test15_ciphertext test15_aad_length test15_aad test15_hash_key;
  test_v test16_expected test16_c_length test16_ciphertext test16_aad_length test16_aad test16_hash_key;
  test_v test17_expected test17_c_length test17_ciphertext test17_aad_length test17_aad test17_hash_key;
  test_v test18_expected test18_c_length test18_ciphertext test18_aad_length test18_aad test18_hash_key;
  test_v test19_expected test19_c_length test19_ciphertext test19_aad_length test19_aad test19_hash_key
