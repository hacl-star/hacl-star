[
  "9198582d4889983981ab3ac6690a27df",
  [
    [
      "Vale.Test.X64.Args.va_lemma_Test",
      1,
      1,
      0,
      [
        "@MaxIFuel_assumption", "@query",
        "Prims_pretyping_f8666440faa91836cc5a13998af863fc",
        "Vale.Arch.HeapImpl_pretyping_6646ba4902a38c8f85d79301e07488b2",
        "Vale.X64.State_pretyping_eb96f2119e19317ec6e3b596d5a46609",
        "b2t_def", "bool_inversion",
        "data_typing_intro_Vale.Arch.HeapImpl.Mkbuffer_info@tok",
        "eq2-interp", "equality_tok_Vale.Arch.HeapImpl.Immutable@tok",
        "equality_tok_Vale.Arch.HeapTypes_s.Secret@tok",
        "equality_tok_Vale.Arch.HeapTypes_s.TUInt64@tok",
        "equation_Prims.eq2", "equation_Prims.l_imp",
        "equation_Prims.logical", "equation_Prims.nat",
        "equation_Prims.squash", "equation_Vale.Arch.HeapImpl.heaplet_id",
        "equation_Vale.Arch.HeapImpl.vale_heaplets",
        "equation_Vale.Def.Prop_s.prop0", "equation_Vale.Def.Types_s.quad32",
        "equation_Vale.Def.Words_s.nat64",
        "equation_Vale.X64.Decls.upd_register",
        "equation_Vale.X64.Decls.va_ensure_total",
        "equation_Vale.X64.Decls.va_require_total",
        "equation_Vale.X64.Decls.va_state_eq",
        "equation_Vale.X64.Decls.va_upd_mem",
        "equation_Vale.X64.Decls.va_upd_mem_layout",
        "equation_Vale.X64.Decls.va_upd_ok",
        "equation_Vale.X64.Decls.va_upd_reg64",
        "equation_Vale.X64.Decls.va_upd_xmm",
        "equation_Vale.X64.Decls.validSrcAddrs",
        "equation_Vale.X64.Decls.validSrcAddrs64",
        "equation_Vale.X64.Memory.buffer64",
        "equation_Vale.X64.Memory.buffer_info_disjoint",
        "equation_Vale.X64.Memory.get_vale_heap",
        "equation_Vale.X64.Memory.init_heaplets_req",
        "equation_Vale.X64.Memory.vale_full_heap_equal",
        "equation_Vale.X64.QuickCode.t_require",
        "equation_Vale.X64.State.state_eq",
        "equation_Vale.X64.State.update_reg_64",
        "equation_Vale.X64.State.update_reg_xmm",
        "fuel_guarded_inversion_Vale.X64.State.vale_state", "int_inversion",
        "int_typing", "l_and-interp", "l_imp-interp",
        "lemma_Vale.Lib.Map16.lemma_equal_intro",
        "lemma_Vale.X64.Flags.lemma_equal_intro",
        "lemma_Vale.X64.QuickCodes.lemma_label_bool",
        "lemma_Vale.X64.Regs.lemma_equal_intro",
        "proj_equation_Vale.Arch.HeapImpl.Mkbuffer_info_@bi_buffer",
        "proj_equation_Vale.Arch.HeapImpl.Mkbuffer_info_@bi_heaplet",
        "proj_equation_Vale.Arch.HeapImpl.Mkbuffer_info_@bi_typ",
        "proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_@vf_heap",
        "proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_@vf_heaplets",
        "proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_@vf_layout",
        "proj_equation_Vale.X64.State.Mkvale_state_@vs_flags",
        "proj_equation_Vale.X64.State.Mkvale_state_@vs_heap",
        "proj_equation_Vale.X64.State.Mkvale_state_@vs_ok",
        "proj_equation_Vale.X64.State.Mkvale_state_@vs_regs",
        "proj_equation_Vale.X64.State.Mkvale_state_@vs_stack",
        "proj_equation_Vale.X64.State.Mkvale_state_@vs_stackTaint",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_BoxInt_proj_0",
        "projection_inverse_FStar.Pervasives.Native.Mktuple2_@_1",
        "projection_inverse_FStar.Pervasives.Native.Mktuple2_@_2",
        "projection_inverse_FStar.Pervasives.Native.Mktuple3_@_1",
        "projection_inverse_Vale.Arch.HeapImpl.Mkbuffer_info_@bi_buffer",
        "projection_inverse_Vale.Arch.HeapImpl.Mkbuffer_info_@bi_heaplet",
        "projection_inverse_Vale.Arch.HeapImpl.Mkbuffer_info_@bi_typ",
        "projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_@vf_heap",
        "projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_@vf_layout",
        "projection_inverse_Vale.X64.State.Mkvale_state_@vs_flags",
        "projection_inverse_Vale.X64.State.Mkvale_state_@vs_heap",
        "projection_inverse_Vale.X64.State.Mkvale_state_@vs_ok",
        "projection_inverse_Vale.X64.State.Mkvale_state_@vs_regs",
        "projection_inverse_Vale.X64.State.Mkvale_state_@vs_stack",
        "projection_inverse_Vale.X64.State.Mkvale_state_@vs_stackTaint",
        "refinement_interpretation_Tm_refine_1b44f0a4c5c8b16f6b015967bbd181b7",
        "refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2",
        "refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d",
        "refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c",
        "string_typing",
        "typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap",
        "typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets",
        "typing_Vale.Arch.HeapImpl.vale_heap",
        "typing_Vale.X64.Memory.get_vale_heap",
        "typing_Vale.X64.Memory.loc_none", "typing_Vale.X64.Memory.modifies",
        "typing_Vale.X64.QuickCodes.label",
        "typing_Vale.X64.QuickCodes.va_range1",
        "typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags",
        "typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap",
        "typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok",
        "typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs",
        "typing_tok_Vale.Arch.HeapImpl.Immutable@tok",
        "typing_tok_Vale.Arch.HeapTypes_s.Secret@tok",
        "typing_tok_Vale.Arch.HeapTypes_s.TUInt64@tok", "unit_typing"
      ],
      0,
      "944a6350429ff952df4e908554cd8cc6"
    ],
    [
      "Vale.Test.X64.Args.va_wpProof_Test",
      1,
      1,
      0,
      [
        "@MaxIFuel_assumption", "@query",
        "Prims_pretyping_f8666440faa91836cc5a13998af863fc",
        "Vale.X64.State_pretyping_eb96f2119e19317ec6e3b596d5a46609",
        "bool_inversion", "data_typing_intro_Vale.X64.Machine_s.Reg@tok",
        "equality_tok_Vale.Arch.HeapTypes_s.Secret@tok",
        "equality_tok_Vale.Arch.HeapTypes_s.TUInt64@tok",
        "equation_Prims.nat", "equation_Vale.Arch.HeapImpl.vale_heaplets",
        "equation_Vale.Def.Words_s.nat64",
        "equation_Vale.Test.X64.Args.va_wp_Test",
        "equation_Vale.X64.Decls.upd_register",
        "equation_Vale.X64.Decls.va_ensure_total",
        "equation_Vale.X64.Decls.va_if",
        "equation_Vale.X64.Decls.va_require_total",
        "equation_Vale.X64.Decls.va_state_eq",
        "equation_Vale.X64.Decls.va_upd_flags",
        "equation_Vale.X64.Decls.va_upd_mem",
        "equation_Vale.X64.Decls.va_upd_mem_heaplet",
        "equation_Vale.X64.Decls.va_upd_mem_layout",
        "equation_Vale.X64.Decls.va_upd_ok",
        "equation_Vale.X64.Decls.va_upd_reg64",
        "equation_Vale.X64.Decls.va_upd_xmm",
        "equation_Vale.X64.Decls.validSrcAddrs",
        "equation_Vale.X64.Decls.validSrcAddrs64",
        "equation_Vale.X64.Machine_s.n_reg_files",
        "equation_Vale.X64.Machine_s.n_regs",
        "equation_Vale.X64.Machine_s.reg_64",
        "equation_Vale.X64.Machine_s.reg_file_id",
        "equation_Vale.X64.Machine_s.reg_id",
        "equation_Vale.X64.Machine_s.reg_xmm",
        "equation_Vale.X64.Machine_s.t_reg",
        "equation_Vale.X64.Machine_s.t_reg_file",
        "equation_Vale.X64.Memory.get_vale_heap",
        "equation_Vale.X64.Memory.set_vale_heap",
        "equation_Vale.X64.Memory.vale_full_heap_equal",
        "equation_Vale.X64.QuickCode.t_require",
        "equation_Vale.X64.QuickCode.va_t_ensure",
        "equation_Vale.X64.State.state_eq",
        "equation_Vale.X64.State.update_reg",
        "equation_Vale.X64.State.update_reg_64",
        "equation_Vale.X64.State.update_reg_xmm",
        "fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap",
        "fuel_guarded_inversion_Vale.X64.State.vale_state", "int_typing",
        "interpretation_Tm_abs_01312f723452e076b33091a0b6aa5647",
        "interpretation_Tm_abs_10837bd600b841fe6b707fa9a7ee7539",
        "interpretation_Tm_abs_23a3061a90a0bff7ef9446ed1612e83d",
        "interpretation_Tm_abs_2858f49ba2f462750e2f4f4b0abe2a51",
        "interpretation_Tm_abs_527eda39c2ec0f130b408c0dc6381943",
        "interpretation_Tm_abs_58acaa1a193632b54b56fc80b7dc5ab7",
        "interpretation_Tm_abs_6e265d6a4513f0ccaffcbd94448ae542",
        "interpretation_Tm_abs_811012be01a08e10f7e971466e1374ab",
        "interpretation_Tm_abs_87e523ff9619d0b0069ebe08fb986270",
        "interpretation_Tm_abs_90fa3c324dcd2321ffd155e84508b8a7",
        "interpretation_Tm_abs_a1ace61614b6b36e306ffbef3f06c835",
        "interpretation_Tm_abs_ad58d365da94b906aa864966f7b2337e",
        "interpretation_Tm_abs_c482e3c38f8ef3f4b14b61e5f206a390",
        "interpretation_Tm_abs_c4dd9ba630d78780f601e79178c214c1",
        "interpretation_Tm_abs_c8f8aba1aabd38014ff7785cc65011f6",
        "interpretation_Tm_abs_e5969698c026dffb59bd3150289b7f1f",
        "lemma_Vale.Lib.Map16.lemma_equal_elim",
        "lemma_Vale.X64.Regs.lemma_equal_elim",
        "proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_@vf_heap",
        "proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_@vf_heaplets",
        "proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_@vf_layout",
        "proj_equation_Vale.X64.Machine_s.Reg_@rf",
        "proj_equation_Vale.X64.State.Mkvale_state_@vs_flags",
        "proj_equation_Vale.X64.State.Mkvale_state_@vs_heap",
        "proj_equation_Vale.X64.State.Mkvale_state_@vs_ok",
        "proj_equation_Vale.X64.State.Mkvale_state_@vs_regs",
        "proj_equation_Vale.X64.State.Mkvale_state_@vs_stack",
        "proj_equation_Vale.X64.State.Mkvale_state_@vs_stackTaint",
        "projection_inverse_BoxInt_proj_0",
        "projection_inverse_FStar.Pervasives.Native.Mktuple2_@_1",
        "projection_inverse_FStar.Pervasives.Native.Mktuple3_@_1",
        "projection_inverse_FStar.Pervasives.Native.Mktuple3_@_2",
        "projection_inverse_FStar.Pervasives.Native.Mktuple3_@_3",
        "projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_@vf_heap",
        "projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_@vf_heaplets",
        "projection_inverse_Vale.X64.Machine_s.Reg_@rf",
        "projection_inverse_Vale.X64.State.Mkvale_state_@vs_flags",
        "projection_inverse_Vale.X64.State.Mkvale_state_@vs_heap",
        "projection_inverse_Vale.X64.State.Mkvale_state_@vs_ok",
        "projection_inverse_Vale.X64.State.Mkvale_state_@vs_regs",
        "projection_inverse_Vale.X64.State.Mkvale_state_@vs_stack",
        "projection_inverse_Vale.X64.State.Mkvale_state_@vs_stackTaint",
        "refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81",
        "refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2",
        "refinement_interpretation_Tm_refine_7d29e56e66c8277ffbad10980c3bdf4c",
        "refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d",
        "refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64",
        "typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap",
        "typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets",
        "typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout",
        "typing_Vale.Arch.HeapImpl.vale_heap", "typing_Vale.Lib.Map16.sel",
        "typing_Vale.Lib.Map16.upd", "typing_Vale.X64.Decls.va_upd_mem",
        "typing_Vale.X64.Decls.va_upd_reg64", "typing_Vale.X64.Regs.sel",
        "typing_Vale.X64.Regs.upd", "typing_Vale.X64.Stack_i.init_rsp",
        "typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags",
        "typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap",
        "typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok",
        "typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs",
        "typing_Vale.X64.State.__proj__Mkvale_state__item__vs_stack",
        "typing_Vale.X64.State.update_reg", "unit_typing"
      ],
      0,
      "52641f3f1eb4fcf09b5d193cecdba9c2"
    ],
    [
      "Vale.Test.X64.Args.va_quick_Test",
      1,
      1,
      0,
      [
        "@MaxIFuel_assumption", "@query",
        "fuel_guarded_inversion_FStar.Pervasives.Native.tuple3"
      ],
      0,
      "28b141192d60e08baac76b3de2ab9c8c"
    ]
  ]
]