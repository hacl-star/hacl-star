#![allow(non_upper_case_globals)]
#![allow(dead_code)]
#![allow(const_item_mutation)]

const px0_0: [u8; 32] = [
  0x70, 0x0c, 0x48, 0xf7, 0x7f, 0x56, 0x58, 0x4c,
  0x5c, 0xc6, 0x32, 0xca, 0x65, 0x64, 0x0d, 0xb9,
  0x1b, 0x6b, 0xac, 0xce, 0x3a, 0x4d, 0xf6, 0xb4,
  0x2c, 0xe7, 0xcc, 0x83, 0x88, 0x33, 0xd2, 0x87
];

const py0_0:[u8; 32] = [ 0xdb, 0x71, 0xe5, 0x09, 0xe3, 0xfd, 0x9b, 0x06,
                             0x0d, 0xdb, 0x20, 0xba, 0x5c, 0x51, 0xdc, 0xc5,
                             0x94, 0x8d, 0x46, 0xfb, 0xf6, 0x40, 0xdf, 0xe0,
                             0x44, 0x17, 0x82, 0xca, 0xb8, 0x5f, 0xa4, 0xac

];
const scalar0:[u8; 32] = [ 0x7d, 0x7d, 0xc5, 0xf7, 0x1e, 0xb2, 0x9d, 0xda,
                               0xf8, 0x0d, 0x62, 0x14, 0x63, 0x2e, 0xea, 0xe0,
                               0x3d, 0x90, 0x58, 0xaf, 0x1f, 0xb6, 0xd2, 0x2e,
                               0xd8, 0x0b, 0xad, 0xb6, 0x2b, 0xc1, 0xa5, 0x34

];
const px_0:[u8; 32] = [ 0xea, 0xd2, 0x18, 0x59, 0x01, 0x19, 0xe8, 0x87,
                            0x6b, 0x29, 0x14, 0x6f, 0xf8, 0x9c, 0xa6, 0x17,
                            0x70, 0xc4, 0xed, 0xbb, 0xf9, 0x7d, 0x38, 0xce,
                            0x38, 0x5e, 0xd2, 0x81, 0xd8, 0xa6, 0xb2, 0x30

];
const py_0:[u8; 32] = [ 0x28, 0xaf, 0x61, 0x28, 0x1f, 0xd3, 0x5e, 0x2f,
                            0xa7, 0x00, 0x25, 0x23, 0xac, 0xc8, 0x5a, 0x42,
                            0x9c, 0xb0, 0x6e, 0xe6, 0x64, 0x83, 0x25, 0x38,
                            0x9f, 0x59, 0xed, 0xfc, 0xe1, 0x40, 0x51, 0x41

];
const result_0:[u8; 32] = [ 0x46, 0xfc, 0x62, 0x10, 0x64, 0x20, 0xff, 0x01,
                                0x2e, 0x54, 0xa4, 0x34, 0xfb, 0xdd, 0x2d, 0x25,
                                0xcc, 0xc5, 0x85, 0x20, 0x60, 0x56, 0x1e, 0x68,
                                0x04, 0x0d, 0xd7, 0x77, 0x89, 0x97, 0xbd, 0x7b

];
const px0_1:[u8; 32] = [ 0x80, 0x9f, 0x04, 0x28, 0x9c, 0x64, 0x34, 0x8c,
                             0x01, 0x51, 0x5e, 0xb0, 0x3d, 0x5c, 0xe7, 0xac,
                             0x1a, 0x8c, 0xb9, 0x49, 0x8f, 0x5c, 0xaa, 0x50,
                             0x19, 0x7e, 0x58, 0xd4, 0x3a, 0x86, 0xa7, 0xae

];
const py0_1:[u8; 32] = [ 0xb2, 0x9d, 0x84, 0xe8, 0x11, 0x19, 0x7f, 0x25,
                             0xeb, 0xa8, 0xf5, 0x19, 0x40, 0x92, 0xcb, 0x6f,
                             0xf4, 0x40, 0xe2, 0x6d, 0x44, 0x21, 0x01, 0x13,
                             0x72, 0x46, 0x1f, 0x57, 0x92, 0x71, 0xcd, 0xa3

];
const scalar1:[u8; 32] = [ 0x38, 0xf6, 0x5d, 0x6d, 0xce, 0x47, 0x67, 0x60,
                               0x44, 0xd5, 0x8c, 0xe5, 0x13, 0x95, 0x82, 0xd5,
                               0x68, 0xf6, 0x4b, 0xb1, 0x60, 0x98, 0xd1, 0x79,
                               0xdb, 0xab, 0x07, 0x74, 0x1d, 0xd5, 0xca, 0xf5

];
const px_1:[u8; 32] = [ 0x11, 0x9f, 0x2f, 0x04, 0x79, 0x02, 0x78, 0x2a,
                            0xb0, 0xc9, 0xe2, 0x7a, 0x54, 0xaf, 0xf5, 0xeb,
                            0x9b, 0x96, 0x48, 0x29, 0xca, 0x99, 0xc0, 0x6b,
                            0x02, 0xdd, 0xba, 0x95, 0xb0, 0xa3, 0xf6, 0xd0

];
const py_1:[u8; 32] = [ 0x8f, 0x52, 0xb7, 0x26, 0x66, 0x4c, 0xac, 0x36,
                            0x6f, 0xc9, 0x8a, 0xc7, 0xa0, 0x12, 0xb2, 0x68,
                            0x2c, 0xbd, 0x96, 0x2e, 0x5a, 0xcb, 0x54, 0x46,
                            0x71, 0xd4, 0x1b, 0x94, 0x45, 0x70, 0x4d, 0x1d

];
const result_1:[u8; 32] = [ 0x05, 0x7d, 0x63, 0x60, 0x96, 0xcb, 0x80, 0xb6,
                                0x7a, 0x8c, 0x03, 0x8c, 0x89, 0x0e, 0x88, 0x7d,
                                0x1a, 0xdf, 0xa4, 0x19, 0x5e, 0x9b, 0x3c, 0xe2,
                                0x41, 0xc8, 0xa7, 0x78, 0xc5, 0x9c, 0xda, 0x67

];
const px0_2:[u8; 32] = [ 0xa2, 0x33, 0x9c, 0x12, 0xd4, 0xa0, 0x3c, 0x33,
                             0x54, 0x6d, 0xe5, 0x33, 0x26, 0x8b, 0x4a, 0xd6,
                             0x67, 0xde, 0xbf, 0x45, 0x8b, 0x46, 0x4d, 0x77,
                             0x44, 0x36, 0x36, 0x44, 0x0e, 0xe7, 0xfe, 0xc3

];
const py0_2:[u8; 32] = [ 0xef, 0x48, 0xa3, 0xab, 0x26, 0xe2, 0x02, 0x20,
                             0xbc, 0xda, 0x2c, 0x18, 0x51, 0x07, 0x68, 0x39,
                             0xda, 0xe8, 0x8e, 0xae, 0x96, 0x28, 0x69, 0xa4,
                             0x97, 0xbf, 0x73, 0xcb, 0x66, 0xfa, 0xf5, 0x36

];
const scalar2:[u8; 32] = [ 0x1a, 0xcc, 0xfa, 0xf1, 0xb9, 0x77, 0x12, 0xb8,
                               0x5a, 0x6f, 0x54, 0xb1, 0x48, 0x98, 0x5a, 0x1b,
                               0xdc, 0x4c, 0x9b, 0xec, 0x0b, 0xd2, 0x58, 0xca,
                               0xd4, 0xb3, 0xd6, 0x03, 0xf4, 0x9f, 0x32, 0xc8

];
const px_2:[u8; 32] = [ 0xd9, 0xf2, 0xb7, 0x9c, 0x17, 0x28, 0x45, 0xbf,
                            0xdb, 0x56, 0x0b, 0xbb, 0x01, 0x44, 0x7c, 0xa5,
                            0xec, 0xc0, 0x47, 0x0a, 0x09, 0x51, 0x3b, 0x61,
                            0x26, 0x90, 0x2c, 0x6b, 0x4f, 0x8d, 0x10, 0x51

];
const py_2:[u8; 32] = [ 0xf8, 0x15, 0xef, 0x5e, 0xc3, 0x21, 0x28, 0xd3,
                            0x48, 0x78, 0x34, 0x76, 0x46, 0x78, 0x70, 0x2e,
                            0x64, 0xe1, 0x64, 0xff, 0x73, 0x15, 0x18, 0x5e,
                            0x23, 0xaf, 0xf5, 0xfa, 0xcd, 0x96, 0xd7, 0xbc

];
const result_2:[u8; 32] = [ 0x2d, 0x45, 0x7b, 0x78, 0xb4, 0x61, 0x41, 0x32,
                                0x47, 0x76, 0x18, 0xa5, 0xb0, 0x77, 0x96, 0x5e,
                                0xc9, 0x07, 0x30, 0xa8, 0xc8, 0x1a, 0x1c, 0x75,
                                0xd6, 0xd4, 0xec, 0x68, 0x00, 0x5d, 0x67, 0xec

];
const px0_3:[u8; 32] = [ 0xdf, 0x39, 0x89, 0xb9, 0xfa, 0x55, 0x49, 0x57,
                             0x19, 0xb3, 0xcf, 0x46, 0xdc, 0xcd, 0x28, 0xb5,
                             0x15, 0x3f, 0x78, 0x08, 0x19, 0x1d, 0xd5, 0x18,
                             0xef, 0xf0, 0xc3, 0xcf, 0xf2, 0xb7, 0x05, 0xed

];
const py0_3:[u8; 32] = [ 0x42, 0x22, 0x94, 0xff, 0x46, 0x00, 0x34, 0x29,
                             0xd7, 0x39, 0xa3, 0x32, 0x06, 0xc8, 0x75, 0x25,
                             0x52, 0xc8, 0xba, 0x54, 0xa2, 0x70, 0xde, 0xfc,
                             0x06, 0xe2, 0x21, 0xe0, 0xfe, 0xaf, 0x6a, 0xc4

];
const scalar3:[u8; 32] = [ 0x20, 0x7c, 0x43, 0xa7, 0x9b, 0xfe, 0xe0, 0x3d,
                               0xb6, 0xf4, 0xb9, 0x44, 0xf5, 0x3d, 0x2f, 0xb7,
                               0x6c, 0xc4, 0x9e, 0xf1, 0xc9, 0xc4, 0xd3, 0x4d,
                               0x51, 0xb6, 0xc6, 0x5c, 0x4d, 0xb6, 0x93, 0x2d

];
const px_3:[u8; 32] = [ 0x24, 0x27, 0x7c, 0x33, 0xf4, 0x50, 0x46, 0x2d,
                            0xcb, 0x3d, 0x48, 0x01, 0xd5, 0x7b, 0x9c, 0xed,
                            0x05, 0x18, 0x8f, 0x16, 0xc2, 0x8e, 0xda, 0x87,
                            0x32, 0x58, 0x04, 0x8c, 0xd1, 0x60, 0x7e, 0x0d

];
const py_3:[u8; 32] = [ 0xc4, 0x78, 0x97, 0x53, 0xe2, 0xb1, 0xf6, 0x3b,
                            0x32, 0xff, 0x01, 0x4e, 0xc4, 0x2c, 0xd6, 0xa6,
                            0x9f, 0xac, 0x81, 0xdf, 0xe6, 0xd0, 0xd6, 0xfd,
                            0x4a, 0xf3, 0x72, 0xae, 0x27, 0xc4, 0x6f, 0x88

];
const result_3:[u8; 32] = [ 0x96, 0x44, 0x12, 0x59, 0x53, 0x4b, 0x80, 0xf6,
                                0xae, 0xe3, 0xd2, 0x87, 0xa6, 0xbb, 0x17, 0xb5,
                                0x09, 0x4d, 0xd4, 0x27, 0x7d, 0x9e, 0x29, 0x4f,
                                0x8f, 0xe7, 0x3e, 0x48, 0xbf, 0x2a, 0x00, 0x24

];
const px0_4:[u8; 32] = [ 0x41, 0x19, 0x2d, 0x28, 0x13, 0xe7, 0x95, 0x61,
                             0xe6, 0xa1, 0xd6, 0xf5, 0x3c, 0x8b, 0xc1, 0xa4,
                             0x33, 0xa1, 0x99, 0xc8, 0x35, 0xe1, 0x41, 0xb0,
                             0x5a, 0x74, 0xa9, 0x7b, 0x0f, 0xae, 0xb9, 0x22

];
const py0_4:[u8; 32] = [ 0x1a, 0xf9, 0x8c, 0xc4, 0x5e, 0x98, 0xa7, 0xe0,
                             0x41, 0xb0, 0x1c, 0xf3, 0x5f, 0x46, 0x2b, 0x75,
                             0x62, 0x28, 0x13, 0x51, 0xc8, 0xeb, 0xf3, 0xff,
                             0xa0, 0x2e, 0x33, 0xa0, 0x72, 0x2a, 0x13, 0x28

];
const scalar4:[u8; 32] = [ 0x59, 0x13, 0x7e, 0x38, 0x15, 0x23, 0x50, 0xb1,
                               0x95, 0xc9, 0x71, 0x8d, 0x39, 0x67, 0x3d, 0x51,
                               0x98, 0x38, 0x05, 0x5a, 0xd9, 0x08, 0xdd, 0x47,
                               0x57, 0x15, 0x2f, 0xd8, 0x25, 0x5c, 0x09, 0xbf

];
const px_4:[u8; 32] = [ 0xa8, 0xc5, 0xfd, 0xce, 0x8b, 0x62, 0xc5, 0xad,
                            0xa5, 0x98, 0xf1, 0x41, 0xad, 0xb3, 0xb2, 0x6c,
                            0xf2, 0x54, 0xc2, 0x80, 0xb2, 0x85, 0x7a, 0x63,
                            0xd2, 0xad, 0x78, 0x3a, 0x73, 0x11, 0x5f, 0x6b

];
const py_4:[u8; 32] = [ 0x80, 0x6e, 0x1a, 0xaf, 0xec, 0x4a, 0xf8, 0x0a,
                            0x0d, 0x78, 0x6b, 0x3d, 0xe4, 0x53, 0x75, 0xb5,
                            0x17, 0xa7, 0xe5, 0xb5, 0x1f, 0xfb, 0x2c, 0x35,
                            0x65, 0x37, 0xc9, 0xe6, 0xef, 0x22, 0x7d, 0x4a

];
const result_4:[u8; 32] = [ 0x19, 0xd4, 0x4c, 0x8d, 0x63, 0xe8, 0xe8, 0xdd,
                                0x12, 0xc2, 0x2a, 0x87, 0xb8, 0xcd, 0x4e, 0xce,
                                0x27, 0xac, 0xdd, 0xe0, 0x4d, 0xbf, 0x47, 0xf7,
                                0xf2, 0x75, 0x37, 0xa6, 0x99, 0x9a, 0x8e, 0x62

];
const px0_5:[u8; 32] = [ 0x33, 0xe8, 0x20, 0x92, 0xa0, 0xf1, 0xfb, 0x38,
                             0xf5, 0x64, 0x9d, 0x58, 0x67, 0xfb, 0xa2, 0x8b,
                             0x50, 0x31, 0x72, 0xb7, 0x03, 0x55, 0x74, 0xbf,
                             0x8e, 0x5b, 0x71, 0x00, 0xa3, 0x05, 0x27, 0x92

];
const py0_5:[u8; 32] = [ 0xf2, 0xcf, 0x6b, 0x60, 0x1e, 0x0a, 0x05, 0x94,
                             0x5e, 0x33, 0x55, 0x50, 0xbf, 0x64, 0x8d, 0x78,
                             0x2f, 0x46, 0x18, 0x6c, 0x77, 0x2c, 0x0f, 0x20,
                             0xd3, 0xcd, 0x0d, 0x6b, 0x8c, 0xa1, 0x4b, 0x2f

];
const scalar5:[u8; 32] = [ 0xf5, 0xf8, 0xe0, 0x17, 0x46, 0x10, 0xa6, 0x61,
                               0x27, 0x79, 0x79, 0xb5, 0x8c, 0xe5, 0xc9, 0x0f,
                               0xee, 0x6c, 0x9b, 0x3b, 0xb3, 0x46, 0xa9, 0x0a,
                               0x71, 0x96, 0x25, 0x5e, 0x40, 0xb1, 0x32, 0xef

];
const px_5:[u8; 32] = [ 0x7b, 0x86, 0x1d, 0xcd, 0x28, 0x44, 0xa5, 0xa8,
                            0x36, 0x3f, 0x6b, 0x8e, 0xf8, 0xd4, 0x93, 0x64,
                            0x0f, 0x55, 0x87, 0x92, 0x17, 0x18, 0x9d, 0x80,
                            0x32, 0x6a, 0xad, 0x94, 0x80, 0xdf, 0xc1, 0x49

];
const py_5:[u8; 32] = [ 0xc4, 0x67, 0x5b, 0x45, 0xee, 0xb3, 0x06, 0x40,
                            0x5f, 0x6c, 0x33, 0xc3, 0x8b, 0xc6, 0x9e, 0xb2,
                            0xbd, 0xec, 0x9b, 0x75, 0xad, 0x5a, 0xf4, 0x70,
                            0x6a, 0xab, 0x84, 0x54, 0x3b, 0x9c, 0xc6, 0x3a

];
const result_5:[u8; 32] = [ 0x66, 0x4e, 0x45, 0xd5, 0xbb, 0xa4, 0xac, 0x93,
                                0x1c, 0xd6, 0x5d, 0x52, 0x01, 0x7e, 0x4b, 0xe9,
                                0xb1, 0x9a, 0x51, 0x5f, 0x66, 0x9b, 0xea, 0x47,
                                0x03, 0x54, 0x2a, 0x2c, 0x52, 0x5c, 0xd3, 0xd3

];

#[test]
pub fn test_ecdhp256 () {
  // Test 0
  let mut result = [0u8; 64];
  let mut pk = [0u8; 64];

  let valid = crate::p256::dh_initiator(&mut result, &mut scalar0);
  assert!(valid);
  let exp = (&mut result).split_at_mut(32usize);
  assert_eq!(exp.0, px_0);
  assert_eq!(exp.1, py_0);

  (pk[0usize..32usize]).copy_from_slice(&mut px0_0);
  (pk[32usize..64usize]).copy_from_slice(&mut py0_0);
  let mut result = [0u8; 64];
  let valid = crate::p256::dh_responder(&mut result, &mut pk, &mut scalar0);
  assert!(valid);
  assert_eq!(result[0usize..32usize], result_0);

  // Test 1
  let mut result = [0u8; 64];
  let mut pk = [0u8; 64];

  let valid = crate::p256::dh_initiator(&mut result, &mut scalar1);
  assert!(valid);
  let exp = (&mut result).split_at_mut(32usize);
  assert_eq!(exp.0, px_1);
  assert_eq!(exp.1, py_1);

  (pk[0usize..32usize]).copy_from_slice(&mut px0_1);
  (pk[32usize..64usize]).copy_from_slice(&mut py0_1);
  let mut result = [0u8; 64];
  let valid = crate::p256::dh_responder(&mut result, &mut pk, &mut scalar1);
  assert!(valid);
  assert_eq!(result[0usize..32usize], result_1);

  // Test 2
  let mut result = [0u8; 64];
  let mut pk = [0u8; 64];

  let valid = crate::p256::dh_initiator(&mut result, &mut scalar2);
  assert!(valid);
  let exp = (&mut result).split_at_mut(32usize);
  assert_eq!(exp.0, px_2);
  assert_eq!(exp.1, py_2);

  (pk[0usize..32usize]).copy_from_slice(&mut px0_2);
  (pk[32usize..64usize]).copy_from_slice(&mut py0_2);
  let mut result = [0u8; 64];
  let valid = crate::p256::dh_responder(&mut result, &mut pk, &mut scalar2);
  assert!(valid);
  assert_eq!(result[0usize..32usize], result_2);

  // Test 3
  let mut result = [0u8; 64];
  let mut pk = [0u8; 64];

  let valid = crate::p256::dh_initiator(&mut result, &mut scalar3);
  assert!(valid);
  let exp = (&mut result).split_at_mut(32usize);
  assert_eq!(exp.0, px_3);
  assert_eq!(exp.1, py_3);

  (pk[0usize..32usize]).copy_from_slice(&mut px0_3);
  (pk[32usize..64usize]).copy_from_slice(&mut py0_3);
  let mut result = [0u8; 64];
  let valid = crate::p256::dh_responder(&mut result, &mut pk, &mut scalar3);
  assert!(valid);
  assert_eq!(result[0usize..32usize], result_3);

  // Test 4
  let mut result = [0u8; 64];
  let mut pk = [0u8; 64];

  let valid = crate::p256::dh_initiator(&mut result, &mut scalar4);
  assert!(valid);
  let exp = (&mut result).split_at_mut(32usize);
  assert_eq!(exp.0, px_4);
  assert_eq!(exp.1, py_4);

  (pk[0usize..32usize]).copy_from_slice(&mut px0_4);
  (pk[32usize..64usize]).copy_from_slice(&mut py0_4);
  let mut result = [0u8; 64];
  let valid = crate::p256::dh_responder(&mut result, &mut pk, &mut scalar4);
  assert!(valid);
  assert_eq!(result[0usize..32usize], result_4);

  // Test 5
  let mut result = [0u8; 64];
  let mut pk = [0u8; 64];

  let valid = crate::p256::dh_initiator(&mut result, &mut scalar5);
  assert!(valid);
  let exp = (&mut result).split_at_mut(32usize);
  assert_eq!(exp.0, px_5);
  assert_eq!(exp.1, py_5);

  (pk[0usize..32usize]).copy_from_slice(&mut px0_5);
  (pk[32usize..64usize]).copy_from_slice(&mut py0_5);
  let mut result = [0u8; 64];
  let valid = crate::p256::dh_responder(&mut result, &mut pk, &mut scalar5);
  assert!(valid);
  assert_eq!(result[0usize..32usize], result_5);
}
