#![allow(non_upper_case_globals)]
#![allow(dead_code)]
#![allow(const_item_mutation)]

const key1: [u8; 20] = [
  0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
  0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
  0x0b, 0x0b, 0x0b, 0x0b
];

const data1: [u8; 8] = [
  0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65
];

const res1_256: [u8; 32] = [
  0xb0, 0x34, 0x4c, 0x61, 0xd8, 0xdb, 0x38, 0x53,
  0x5c, 0xa8, 0xaf, 0xce, 0xaf, 0x0b, 0xf1, 0x2b,
  0x88, 0x1d, 0xc2, 0x00, 0xc9, 0x83, 0x3d, 0xa7,
  0x26, 0xe9, 0x37, 0x6c, 0x2e, 0x32, 0xcf, 0xf7
];

const res1_384: [u8; 48] = [
  0xaf, 0xd0, 0x39, 0x44, 0xd8, 0x48, 0x95, 0x62,
  0x6b, 0x08, 0x25, 0xf4, 0xab, 0x46, 0x90, 0x7f,
  0x15, 0xf9, 0xda, 0xdb, 0xe4, 0x10, 0x1e, 0xc6,
  0x82, 0xaa, 0x03, 0x4c, 0x7c, 0xeb, 0xc5, 0x9c,
  0xfa, 0xea, 0x9e, 0xa9, 0x07, 0x6e, 0xde, 0x7f,
  0x4a, 0xf1, 0x52, 0xe8, 0xb2, 0xfa, 0x9c, 0xb6
];

const res1_512: [u8; 64] = [
  0x87, 0xaa, 0x7c, 0xde, 0xa5, 0xef, 0x61, 0x9d,
  0x4f, 0xf0, 0xb4, 0x24, 0x1a, 0x1d, 0x6c, 0xb0,
  0x23, 0x79, 0xf4, 0xe2, 0xce, 0x4e, 0xc2, 0x78,
  0x7a, 0xd0, 0xb3, 0x05, 0x45, 0xe1, 0x7c, 0xde,
  0xda, 0xa8, 0x33, 0xb7, 0xd6, 0xb8, 0xa7, 0x02,
  0x03, 0x8b, 0x27, 0x4e, 0xae, 0xa3, 0xf4, 0xe4,
  0xbe, 0x9d, 0x91, 0x4e, 0xeb, 0x61, 0xf1, 0x70,
  0x2e, 0x69, 0x6c, 0x20, 0x3a, 0x12, 0x68, 0x54
];

const key2: [u8; 4] = [ 0x4a, 0x65, 0x66, 0x65 ];

const data2: [u8; 28] = [
  0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20,
  0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 
  0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
  0x69, 0x6e, 0x67, 0x3f
];

const res2_256: [u8; 32] = [
  0x5b, 0xdc, 0xc1, 0x46, 0xbf, 0x60, 0x75, 0x4e,
  0x6a, 0x04, 0x24, 0x26, 0x08, 0x95, 0x75, 0xc7,
  0x5a, 0x00, 0x3f, 0x08, 0x9d, 0x27, 0x39, 0x83,
  0x9d, 0xec, 0x58, 0xb9, 0x64, 0xec, 0x38, 0x43
];

const res2_384: [u8; 48] = [
  0xaf, 0x45, 0xd2, 0xe3, 0x76, 0x48, 0x40, 0x31,
  0x61, 0x7f, 0x78, 0xd2, 0xb5, 0x8a, 0x6b, 0x1b,
  0x9c, 0x7e, 0xf4, 0x64, 0xf5, 0xa0, 0x1b, 0x47,
  0xe4, 0x2e, 0xc3, 0x73, 0x63, 0x22, 0x44, 0x5e,
  0x8e, 0x22, 0x40, 0xca, 0x5e, 0x69, 0xe2, 0xc7,
  0x8b, 0x32, 0x39, 0xec, 0xfa, 0xb2, 0x16, 0x49
];

const res2_512: [u8; 64] = [
  0x16, 0x4b, 0x7a, 0x7b, 0xfc, 0xf8, 0x19, 0xe2,
  0xe3, 0x95, 0xfb, 0xe7, 0x3b, 0x56, 0xe0, 0xa3,
  0x87, 0xbd, 0x64, 0x22, 0x2e, 0x83, 0x1f, 0xd6,
  0x10, 0x27, 0x0c, 0xd7, 0xea, 0x25, 0x05, 0x54,
  0x97, 0x58, 0xbf, 0x75, 0xc0, 0x5a, 0x99, 0x4a,
  0x6d, 0x03, 0x4f, 0x65, 0xf8, 0xf0, 0xe6, 0xfd,
  0xca, 0xea, 0xb1, 0xa3, 0x4d, 0x4a, 0x6b, 0x4b,
  0x63, 0x6e, 0x07, 0x0a, 0x38, 0xbc, 0xe7, 0x37
];

#[test]
pub fn test_hmac () {
  // Test 1
  let mut res_256 = [0u8; 32];
  crate::hmac::compute_sha2_256(&mut res_256, &mut key1, key1.len() as u32, &mut data1, data1.len() as u32);
  assert_eq!(res_256, res1_256);

  let mut res_384 = [0u8; 48];
  crate::hmac::compute_sha2_384(&mut res_384, &mut key1, key1.len() as u32, &mut data1, data1.len() as u32);
  assert_eq!(res_384, res1_384);

  let mut res_512 = [0u8; 64];
  crate::hmac::compute_sha2_512(&mut res_512, &mut key1, key1.len() as u32, &mut data1, data1.len() as u32);
  assert_eq!(res_512, res1_512);

  // Test 2
  let mut res_256 = [0u8; 32];
  crate::hmac::compute_sha2_256(&mut res_256, &mut key2, key2.len() as u32, &mut data2, data2.len() as u32);
  assert_eq!(res_256, res2_256);

  let mut res_384 = [0u8; 48];
  crate::hmac::compute_sha2_384(&mut res_384, &mut key2, key2.len() as u32, &mut data2, data2.len() as u32);
  assert_eq!(res_384, res2_384);

  let mut res_512 = [0u8; 64];
  crate::hmac::compute_sha2_512(&mut res_512, &mut key2, key2.len() as u32, &mut data2, data2.len() as u32);
  assert_eq!(res_512, res2_512);
}

