#![allow(non_upper_case_globals)]
#![allow(dead_code)]
#![allow(const_item_mutation)]

const input1: [u8; 3] = [ 0x61, 0x62, 0x63 ];

const input2: [u8; 0] = [];


const tag1_224: [u8; 28] = [
  0xe6, 0x42, 0x82, 0x4c, 0x3f, 0x8c, 0xf2, 0x4a,
  0xd0, 0x92, 0x34, 0xee, 0x7d, 0x3c, 0x76, 0x6f,
  0xc9, 0xa3, 0xa5, 0x16, 0x8d, 0x0c, 0x94, 0xad,
  0x73, 0xb4, 0x6f, 0xdf
];

const tag1_256: [u8; 32] = [
  0x3a, 0x98, 0x5d, 0xa7, 0x4f, 0xe2, 0x25, 0xb2,
  0x04, 0x5c, 0x17, 0x2d, 0x6b, 0xd3, 0x90, 0xbd,
  0x85, 0x5f, 0x08, 0x6e, 0x3e, 0x9d, 0x52, 0x5b,
  0x46, 0xbf, 0xe2, 0x45, 0x11, 0x43, 0x15, 0x32,
];

const tag1_384: [u8; 48] = [
  0xec, 0x01, 0x49, 0x82, 0x88, 0x51, 0x6f, 0xc9,
  0x26, 0x45, 0x9f, 0x58, 0xe2, 0xc6, 0xad, 0x8d,
  0xf9, 0xb4, 0x73, 0xcb, 0x0f, 0xc0, 0x8c, 0x25,
  0x96, 0xda, 0x7c, 0xf0, 0xe4, 0x9b, 0xe4, 0xb2,
  0x98, 0xd8, 0x8c, 0xea, 0x92, 0x7a, 0xc7, 0xf5,
  0x39, 0xf1, 0xed, 0xf2, 0x28, 0x37, 0x6d, 0x25,
];

const tag1_512: [u8; 64] = [
  0xb7, 0x51, 0x85, 0x0b, 0x1a, 0x57, 0x16, 0x8a,
  0x56, 0x93, 0xcd, 0x92, 0x4b, 0x6b, 0x09, 0x6e,
  0x08, 0xf6, 0x21, 0x82, 0x74, 0x44, 0xf7, 0x0d,
  0x88, 0x4f, 0x5d, 0x02, 0x40, 0xd2, 0x71, 0x2e,
  0x10, 0xe1, 0x16, 0xe9, 0x19, 0x2a, 0xf3, 0xc9,
  0x1a, 0x7e, 0xc5, 0x76, 0x47, 0xe3, 0x93, 0x40,
  0x57, 0x34, 0x0b, 0x4c, 0xf4, 0x08, 0xd5, 0xa5,
  0x65, 0x92, 0xf8, 0x27, 0x4e, 0xec, 0x53, 0xf0
];

const tag2_224: [u8; 28] = [
  0x6b, 0x4e, 0x03, 0x42, 0x36, 0x67, 0xdb, 0xb7,
  0x3b, 0x6e, 0x15, 0x45, 0x4f, 0x0e, 0xb1, 0xab,
  0xd4, 0x59, 0x7f, 0x9a, 0x1b, 0x07, 0x8e, 0x3f,
  0x5b, 0x5a, 0x6b, 0xc7,
];

const tag2_256: [u8; 32] = [
  0xa7, 0xff, 0xc6, 0xf8, 0xbf, 0x1e, 0xd7, 0x66,
  0x51, 0xc1, 0x47, 0x56, 0xa0, 0x61, 0xd6, 0x62,
  0xf5, 0x80, 0xff, 0x4d, 0xe4, 0x3b, 0x49, 0xfa,
  0x82, 0xd8, 0x0a, 0x4b, 0x80, 0xf8, 0x43, 0x4a
];

const tag2_384: [u8; 48] = [
  0x0c, 0x63, 0xa7, 0x5b, 0x84, 0x5e, 0x4f, 0x7d,
  0x01, 0x10, 0x7d, 0x85, 0x2e, 0x4c, 0x24, 0x85,
  0xc5, 0x1a, 0x50, 0xaa, 0xaa, 0x94, 0xfc, 0x61,
  0x99, 0x5e, 0x71, 0xbb, 0xee, 0x98, 0x3a, 0x2a,
  0xc3, 0x71, 0x38, 0x31, 0x26, 0x4a, 0xdb, 0x47,
  0xfb, 0x6b, 0xd1, 0xe0, 0x58, 0xd5, 0xf0, 0x04,
];

const tag2_512: [u8; 64] = [
  0xa6, 0x9f, 0x73, 0xcc, 0xa2, 0x3a, 0x9a, 0xc5,
  0xc8, 0xb5, 0x67, 0xdc, 0x18, 0x5a, 0x75, 0x6e,
  0x97, 0xc9, 0x82, 0x16, 0x4f, 0xe2, 0x58, 0x59,
  0xe0, 0xd1, 0xdc, 0xc1, 0x47, 0x5c, 0x80, 0xa6,
  0x15, 0xb2, 0x12, 0x3a, 0xf1, 0xf5, 0xf9, 0x4c,
  0x11, 0xe3, 0xe9, 0x40, 0x2c, 0x3a, 0xc5, 0x58,
  0xf5, 0x00, 0x19, 0x9d, 0x95, 0xb6, 0xd3, 0xe3,
  0x01, 0x75, 0x85, 0x86, 0x28, 0x1d, 0xcd, 0x26,
];


#[test]
pub fn test_sha3() {
  use crate::streaming_types::hash_alg::{SHA3_224, SHA3_256, SHA3_384, SHA3_512};

  // SHA3-224
  let mut tag_224 = [0u8; 28];
  let mut state_224 = crate::hash_sha3::malloc(SHA3_224);
  crate::hash_sha3::update(&mut state_224, &mut input1, input1.len() as u32);
  crate::hash_sha3::digest(&mut state_224, &mut tag_224);
  assert_eq!(tag_224, tag1_224);

  let mut tag_224 = [0u8; 28];
  let mut state_224 = crate::hash_sha3::malloc(SHA3_224);
  crate::hash_sha3::update(&mut state_224, &mut input2, input2.len() as u32);
  crate::hash_sha3::digest(&mut state_224, &mut tag_224);
  assert_eq!(tag_224, tag2_224);

  // SHA3-256
  let mut tag_256 = [0u8; 32];
  let mut state_256 = crate::hash_sha3::malloc(SHA3_256);
  crate::hash_sha3::update(&mut state_256, &mut input1, input1.len() as u32);
  crate::hash_sha3::digest(&mut state_256, &mut tag_256);
  assert_eq!(tag_256, tag1_256);

  let mut tag_256 = [0u8; 32];
  let mut state_256 = crate::hash_sha3::malloc(SHA3_256);
  crate::hash_sha3::update(&mut state_256, &mut input2, input2.len() as u32);
  crate::hash_sha3::digest(&mut state_256, &mut tag_256);
  assert_eq!(tag_256, tag2_256);
  
  // SHA3-384
  let mut tag_384 = [0u8; 48];
  let mut state_384 = crate::hash_sha3::malloc(SHA3_384);
  crate::hash_sha3::update(&mut state_384, &mut input1, input1.len() as u32);
  crate::hash_sha3::digest(&mut state_384, &mut tag_384);
  assert_eq!(tag_384, tag1_384);

  let mut tag_384 = [0u8; 48];
  let mut state_384 = crate::hash_sha3::malloc(SHA3_384);
  crate::hash_sha3::update(&mut state_384, &mut input2, input2.len() as u32);
  crate::hash_sha3::digest(&mut state_384, &mut tag_384);
  assert_eq!(tag_384, tag2_384);

  // SHA3-512
  let mut tag_512 = [0u8; 64];
  let mut state_512 = crate::hash_sha3::malloc(SHA3_512);
  crate::hash_sha3::update(&mut state_512, &mut input1, input1.len() as u32);
  crate::hash_sha3::digest(&mut state_512, &mut tag_512);
  assert_eq!(tag_512, tag1_512);

  let mut tag_512 = [0u8; 64];
  let mut state_512 = crate::hash_sha3::malloc(SHA3_512);
  crate::hash_sha3::update(&mut state_512, &mut input2, input2.len() as u32);
  crate::hash_sha3::digest(&mut state_512, &mut tag_512);
  assert_eq!(tag_512, tag2_512);

}
