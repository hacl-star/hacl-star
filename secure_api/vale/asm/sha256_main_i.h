/* This file was auto-generated by KaRaMeL! */
#include "krmllib.h"
#ifndef __sha256_main_i_H
#define __sha256_main_i_H


#include "Prims.h"
#include "DafnyLib.h"

typedef struct 
{
  uint32_t *H;
  uint8_t *unprocessed_bytes;
  uint32_t num_unprocessed_bytes;
  uint64_t num_total_bytes;
}
sha256_main_i_SHA256Context;

extern void
__stdcall
sha256_main_i_SHA256_Compute64Steps(
  uint32_t *x0,
  uint32_t *x1,
  uint32_t x2,
  uint32_t x3,
  uint32_t x4,
  uint32_t x5,
  uint32_t x6,
  uint32_t x7,
  uint32_t x8,
  uint32_t x9,
  uint32_t x10,
  uint32_t x11,
  uint32_t x12,
  uint32_t x13,
  uint32_t x14,
  uint32_t x15,
  uint32_t x16,
  uint32_t x17,
  uint32_t x18
);

extern void
__stdcall
sha256_main_i_SHA256_ComputeInitialWs(
  uint8_t *x0,
  uint32_t x1,
  uint32_t *x2,
  uint32_t x3,
  uint32_t x4,
  uint32_t x5,
  uint32_t x6
);

void
__stdcall
sha256_main_i_DafnyMemcpy(
  uint8_t *dst,
  uint64_t dst_offset,
  uint8_t *src,
  uint64_t src_offset,
  uint64_t len
);

void __stdcall sha256_main_i_DafnyBzero(uint8_t *ptr, uint32_t offset, uint32_t len);

void __stdcall sha256_main_i_CopyUint64ToByteArray(uint8_t *a, uint64_t offset, uint64_t u);

void __stdcall sha256_main_i_CopyUint32Array(uint32_t *dst, uint32_t *src, uint64_t len);

void
__stdcall
sha256_main_i_SHA256_DigestOneBlock(
  sha256_main_i_SHA256Context *ctx,
  uint32_t *W,
  uint8_t *ptr,
  uint64_t offset
);

void
__stdcall
sha256_main_i_SHA256_BlockDataOrder(
  sha256_main_i_SHA256Context *ctx,
  uint8_t *ptr,
  uint64_t offset,
  uint64_t len
);

void
__stdcall
sha256_main_i_SHA256UpdateWhenNoUnprocessedBytes(
  sha256_main_i_SHA256Context *ctx,
  uint8_t *bytes,
  uint64_t offset,
  uint64_t len
);

void __stdcall sha256_main_i_SHA256_Init(sha256_main_i_SHA256Context *ctx);

void
__stdcall
sha256_main_i_SHA256_Update(
  sha256_main_i_SHA256Context *ctx,
  uint8_t *bytes,
  uint64_t offset,
  uint64_t len
);

void __stdcall sha256_main_i_SHA256_Final(sha256_main_i_SHA256Context *ctx, uint32_t *digest);

void
__stdcall
sha256_main_i_SHA256_Complete(uint8_t *bytes, uint64_t offset, uint64_t len, uint32_t *digest);
#endif
