/* This file was auto-generated by KreMLin! */
#include "kremlib.h"
#ifndef __RSA_H
#define __RSA_H


#include "Addition.h"
#include "Comparison.h"
#include "Convert.h"
#include "Shift.h"
#include "Division.h"
#include "Multiplication.h"
#include "Exponentiation.h"
#include "Hacl_Hash_Lib_Create.h"
#include "Hacl_Hash_Lib_LoadStore.h"
#include "Hacl_Hash_SHA2_256.h"
#include "SHA2_256.h"
#include "testlib.h"

typedef uint8_t *RSA_uint8_p;

typedef uint64_t *RSA_bignum;

extern uint8_t RSA_zero_8;

extern uint32_t RSA_hLen;

extern uint32_t RSA_sLen;

typedef struct 
{
  uint64_t *n;
  uint64_t *e;
}
RSA_rsa_pubkey;

bool RSA_uu___is_Mk_rsa_pubkey(RSA_rsa_pubkey projectee);

uint64_t *RSA___proj__Mk_rsa_pubkey__item__n(RSA_rsa_pubkey projectee);

uint64_t *RSA___proj__Mk_rsa_pubkey__item__e(RSA_rsa_pubkey projectee);

uint64_t *RSA_get_n(RSA_rsa_pubkey x);

uint64_t *RSA_get_e(RSA_rsa_pubkey x);

typedef struct 
{
  RSA_rsa_pubkey pkey;
  uint64_t *d;
}
RSA_rsa_privkey;

bool RSA_uu___is_Mk_rsa_privkey(RSA_rsa_privkey projectee);

RSA_rsa_pubkey RSA___proj__Mk_rsa_privkey__item__pkey(RSA_rsa_privkey projectee);

uint64_t *RSA___proj__Mk_rsa_privkey__item__d(RSA_rsa_privkey projectee);

RSA_rsa_pubkey RSA_get_pkey(RSA_rsa_privkey x);

uint64_t *RSA_get_d(RSA_rsa_privkey x);

uint32_t RSA_get_octets(uint32_t modBits);

uint32_t RSA_get_length_em(uint32_t modBits);

void RSA_hash_sha256(uint8_t *mHash, uint8_t *m, uint32_t len);

void
RSA_mgf(
  uint32_t mgfseed_len,
  uint8_t *mgfseed,
  uint32_t len,
  uint32_t counter,
  uint8_t *acc,
  uint8_t *res
);

void RSA_xordb(uint8_t *b1, uint8_t *b2, uint32_t len);

void RSA_pss_encode(uint32_t modBits, uint8_t *msg, uint32_t len, uint8_t *salt, uint8_t *em);

bool RSA_pss_verify(uint32_t modBits, uint8_t *em, uint8_t *msg, uint32_t len);

void
RSA_rsa_sign(
  uint32_t modBits,
  uint32_t skeyBits,
  uint32_t msgLen,
  uint8_t *msg,
  RSA_rsa_privkey skey,
  uint8_t *salt,
  uint8_t *sgnt
);

bool
RSA_rsa_verify(
  uint32_t modBits,
  uint32_t msgLen,
  uint32_t pkeyBits,
  uint8_t *sgnt,
  RSA_rsa_pubkey pkey,
  uint8_t *msg
);
#endif
