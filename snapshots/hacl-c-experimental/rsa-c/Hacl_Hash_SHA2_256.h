/* This file was auto-generated by KreMLin! */
#include "kremlib.h"
#ifndef __Hacl_Hash_SHA2_256_H
#define __Hacl_Hash_SHA2_256_H


#include "Addition.h"
#include "Comparison.h"
#include "Convert.h"
#include "Shift.h"
#include "Division.h"
#include "Multiplication.h"
#include "Exponentiation.h"
#include "Hacl_Hash_Lib_Create.h"
#include "Hacl_Hash_Lib_LoadStore.h"
#include "testlib.h"

typedef uint8_t Hacl_Hash_SHA2_256_uint8_t;

typedef uint32_t Hacl_Hash_SHA2_256_uint32_t;

typedef uint64_t Hacl_Hash_SHA2_256_uint64_t;

typedef uint8_t Hacl_Hash_SHA2_256_uint8_ht;

typedef uint32_t Hacl_Hash_SHA2_256_uint32_ht;

typedef uint64_t Hacl_Hash_SHA2_256_uint64_ht;

typedef uint32_t *Hacl_Hash_SHA2_256_uint32_p;

typedef uint8_t *Hacl_Hash_SHA2_256_uint8_p;

uint8_t Hacl_Hash_SHA2_256_u8_to_h8(uint8_t a);

uint32_t Hacl_Hash_SHA2_256_u32_to_h32(uint32_t a);

uint64_t Hacl_Hash_SHA2_256_u32_to_h64(uint32_t a);

uint8_t Hacl_Hash_SHA2_256_h32_to_h8(uint32_t a);

uint64_t Hacl_Hash_SHA2_256_h32_to_h64(uint32_t a);

uint64_t Hacl_Hash_SHA2_256_u64_to_h64(uint64_t a);

extern uint32_t Hacl_Hash_SHA2_256_size_word;

extern uint32_t Hacl_Hash_SHA2_256_size_hash_w;

extern uint32_t Hacl_Hash_SHA2_256_size_block_w;

extern uint32_t Hacl_Hash_SHA2_256_size_hash;

extern uint32_t Hacl_Hash_SHA2_256_size_block;

extern uint64_t Hacl_Hash_SHA2_256_max_input_len;

extern uint32_t Hacl_Hash_SHA2_256_size_k_w;

extern uint32_t Hacl_Hash_SHA2_256_size_ws_w;

extern uint32_t Hacl_Hash_SHA2_256_size_whash_w;

extern uint32_t Hacl_Hash_SHA2_256_size_count_w;

extern uint32_t Hacl_Hash_SHA2_256_size_len_8;

extern uint32_t Hacl_Hash_SHA2_256_size_state;

extern uint32_t Hacl_Hash_SHA2_256_pos_k_w;

extern uint32_t Hacl_Hash_SHA2_256_pos_ws_w;

extern uint32_t Hacl_Hash_SHA2_256_pos_whash_w;

extern uint32_t Hacl_Hash_SHA2_256_pos_count_w;

uint32_t Hacl_Hash_SHA2_256_rotate_right(uint32_t a, uint32_t b);

void Hacl_Hash_SHA2_256_constants_set_h_0(uint32_t *hash1);

void Hacl_Hash_SHA2_256_init(uint32_t *state);

void Hacl_Hash_SHA2_256_counter_increment(uint32_t *counter_w);

void Hacl_Hash_SHA2_256_update(uint32_t *state, uint8_t *data);

void Hacl_Hash_SHA2_256_update_multi(uint32_t *state, uint8_t *data, uint32_t n1);

uint32_t Hacl_Hash_SHA2_256_pad0_length(uint32_t len);

uint64_t Hacl_Hash_SHA2_256_encode_length(uint32_t count1, uint32_t len);

void Hacl_Hash_SHA2_256_set_pad_part1(uint8_t *buf1);

void Hacl_Hash_SHA2_256_set_pad_part2(uint8_t *buf2, uint64_t encodedlen);

void Hacl_Hash_SHA2_256_pad(uint8_t *padding, uint32_t n1, uint32_t len);

typedef struct 
{
  uint32_t fst;
  uint8_t *snd;
}
K___uint32_t_uint8_t_;

void Hacl_Hash_SHA2_256_update_last(uint32_t *state, uint8_t *data, uint32_t len);

void Hacl_Hash_SHA2_256_finish_core(uint32_t *hash_w, uint8_t *hash1);

void Hacl_Hash_SHA2_256_finish(uint32_t *state, uint8_t *hash1);

void Hacl_Hash_SHA2_256_hash(uint8_t *hash1, uint8_t *input, uint32_t len);
#endif
