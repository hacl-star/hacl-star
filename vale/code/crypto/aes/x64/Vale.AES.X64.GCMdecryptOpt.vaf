include "../../../arch/x64/Vale.X64.InsBasic.vaf"
include "../../../arch/x64/Vale.X64.InsMem.vaf"
include "../../../arch/x64/Vale.X64.InsVector.vaf"
include "../../../arch/x64/Vale.X64.InsStack.vaf"
include "../../../lib/util/Vale.Lib.Basic.vaf"
include "../../../lib/util/x64/Vale.X64.Stack.vaf"
include "../../../thirdPartyPorts/OpenSSL/aes/Vale.AES.X64.AESopt.vaf"
include "../../../thirdPartyPorts/OpenSSL/aes/Vale.AES.X64.AESGCM.vaf"
include "../../../thirdPartyPorts/OpenSSL/aes/Vale.AES.X64.AESopt2.vaf"
include "Vale.AES.X64.GCMencryptOpt.vaf"
include "Vale.AES.X64.AES.vaf"
include "Vale.AES.X64.GF128_Mul.vaf"
include "Vale.AES.X64.GCTR.vaf"
include "Vale.AES.X64.GHash.vaf"
include "Vale.AES.X64.GCMencryptOpt.vaf"
include{:fstar}{:open} "Vale.Def.Prop_s"
include{:fstar}{:open} "open Vale.Def.Opaque_s"
include{:fstar}{:open} "FStar.Seq.Base"
include{:fstar}{:open} "Vale.Def.Words_s"
include{:fstar}{:open} "Vale.Def.Words.Seq_s"
include{:fstar}{:open} "Vale.Def.Types_s"
include{:fstar}{:open} "Vale.Arch.Types"
include{:fstar}{:open} "Vale.AES.AES_s"
include{:fstar}{:open} "Vale.AES.GCTR_s"
include{:fstar}{:open} "Vale.AES.GCTR"
include{:fstar}{:open} "Vale.AES.GCM"
include{:fstar}{:open} "Vale.AES.GHash_s"
include{:fstar}{:open} "Vale.AES.GHash"
include{:fstar}{:open} "Vale.AES.GCM_s"
include{:fstar}{:open} "Vale.AES.GF128_s"
include{:fstar}{:open} "Vale.AES.GF128"
include{:fstar}{:open} "Vale.Lib.Meta"
include{:fstar}{:open} "Vale.Poly1305.Math"
include{:fstar}{:open} "Vale.AES.GCM_helpers"
include{:fstar}{:open} "Vale.X64.Machine_s"
include{:fstar}{:open} "Vale.X64.Memory"
include{:fstar}{:open} "Vale.X64.State"
include{:fstar}{:open} "Vale.X64.Decls"
include{:fstar}{:open} "Vale.X64.QuickCode"
include{:fstar}{:open} "Vale.X64.QuickCodes"
include{:fstar}{:open} "Vale.X64.CPU_Features_s"
include{:fstar}{:open} "Vale.Math.Poly2.Bits_s"
include{:fstar}{:open} "Vale.AES.OptPublic"

module Vale.AES.X64.GCMdecryptOpt

#verbatim{:interface}{:implementation}
open Vale.Def.Prop_s
open Vale.Def.Opaque_s
open FStar.Seq
open Vale.Def.Words_s
open Vale.Def.Words.Seq_s
open Vale.Def.Types_s
open Vale.Arch.Types
open Vale.Arch.HeapImpl
open Vale.AES.AES_s
open Vale.AES.GCTR_s
open Vale.AES.GCTR
open Vale.AES.GCM
open Vale.AES.GHash_s
open Vale.AES.GHash
open Vale.AES.GCM_s
open Vale.AES.X64.AES
open Vale.AES.GF128_s
open Vale.AES.GF128
open Vale.Poly1305.Math
open Vale.AES.GCM_helpers
open Vale.AES.X64.GHash
open Vale.AES.X64.GCTR
open Vale.X64.Machine_s
open Vale.X64.Memory
open Vale.X64.Stack_i
open Vale.X64.State
open Vale.X64.Decls
open Vale.X64.InsBasic
open Vale.X64.InsMem
open Vale.X64.InsVector
open Vale.X64.InsStack
open Vale.X64.InsAes
open Vale.X64.QuickCode
open Vale.X64.QuickCodes
open Vale.AES.X64.GF128_Mul
open Vale.X64.Stack
open Vale.X64.CPU_Features_s
open Vale.Math.Poly2.Bits_s
open Vale.AES.X64.AESopt
open Vale.AES.X64.AESGCM
open Vale.AES.X64.AESopt2
open Vale.Lib.Meta
open Vale.AES.X64.GCMencryptOpt
open Vale.AES.OptPublic
#endverbatim

#verbatim{:interface}
let aes_reqs
  (alg:algorithm) (key:seq nat32) (round_keys:seq quad32) (keys_b:buffer128)
  (key_ptr:int) (heap0:vale_heap) (layout:vale_heap_layout) : prop0
  =
  aesni_enabled /\ avx_enabled /\
  (alg = AES_128 \/ alg = AES_256) /\
  is_aes_key_LE alg key /\
  length(round_keys) == nr(alg) + 1 /\
  round_keys == key_to_round_keys_LE alg key /\
  validSrcAddrs128 heap0 key_ptr keys_b (nr alg + 1) layout Secret /\
  s128 heap0 keys_b == round_keys
#endverbatim

#verbatim
open Vale.Lib.Basic
#reset-options "--z3rlimit 20 --ifuel 0"
#endverbatim

function aes_reqs(alg:algorithm, key:seq(nat32), round_keys:seq(quad32), keys_b:buffer128,
    key_ptr:int, heap0:vale_heap, layout:vale_heap_layout) : prop extern;


///////////////////////////
// GCM
///////////////////////////

procedure Gcm_extra_bytes(
        inline alg:algorithm,
        ghost inout_b:buffer128,
        ghost key:seq(nat32),
        ghost round_keys:seq(quad32),
        ghost keys_b:buffer128,
        ghost hkeys_b:buffer128,
        ghost total_bytes:nat,
        ghost old_hash:quad32,
        ghost completed_quads:seq(quad32),
        ghost h_LE:quad32)
    {:quick}
    lets io_ptr @= rax; keys_ptr @= r8; Xip @= r9; num_bytes @= r10; tmp @= rcx; extra @= r11;
         Ii @= xmm0; T1 @= xmm1; T2 @= xmm2; Hkey @= xmm3;
         Z0 @= xmm4; Z1 @= xmm5; Z2 @= xmm6; Z3 @= xmm7;
         hash @= xmm8; rev_mask @= xmm9; save_xmm @= xmm10; icb @= xmm11;
         len := 1;
    reads
        io_ptr; keys_ptr; num_bytes; Xip; rev_mask; icb; memLayout; heap0;
    modifies
        tmp; extra; Ii; T1; T2; Hkey; Z0; Z1; Z2; Z3; hash; save_xmm; heap5; efl; 

    requires
        sse_enabled;

        // GCTR reqs
        buffers_disjoint128(keys_b, inout_b);
        buffers_disjoint128(hkeys_b, inout_b);
        validDstAddrs128(heap5,  io_ptr,  inout_b, len, memLayout, Secret);
        //in_ptr  + 16 * len < pow2_64;
        len == buffer_length(inout_b);
        rev_mask == Mkfour(0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203);

        // AES reqs
        aes_reqs(alg, key, round_keys, keys_b, keys_ptr, heap0, memLayout);

        // GCM
        pclmulqdq_enabled;
        hkeys_reqs_priv(s128(heap0, hkeys_b), reverse_bytes_quad32(h_LE));
        validSrcAddrs128(heap0, Xip - 0x20, hkeys_b, 8, memLayout, Secret);

        // Previous work requirements
        hash == reverse_bytes_quad32(ghash_incremental0(h_LE, old_hash, completed_quads));

        // Extra reqs
        length(completed_quads) == total_bytes / 16;
        total_bytes < 16 * length(completed_quads) + 16;
        num_bytes == total_bytes % 16;
        total_bytes % 16 != 0;        // Note: This implies total_bytes > 0
        0 < total_bytes < 16 * bytes_to_quad_size(total_bytes);
        16 * (bytes_to_quad_size(total_bytes) - 1) < total_bytes;

    ensures
        modifies_buffer128(inout_b, old(heap5), heap5);

        // GCTR
        gctr_partial(alg, len, old(s128(heap5, inout_b)), s128(heap5, inout_b), key, old(icb));

        // GHash
        let raw_quads := append(completed_quads, old(s128(heap5, inout_b)));
        let input_bytes := slice(le_seq_quad32_to_bytes(raw_quads), 0, total_bytes);
        let padded_bytes := pad_to_128_bits(input_bytes);
        let input_quads := le_bytes_to_seq_quad32(padded_bytes);
        length(input_quads) > 0 /\
            reverse_bytes_quad32(hash) == 
            ghash_incremental(h_LE, old_hash, input_quads);
{
    Load128_buffer(heap5, Ii, io_ptr, 0, Secret, inout_b, 0); 
    Mov128(save_xmm, Ii);       // Save a copy

    // Update our hash
    let hash_input := Ii;
    Ghash_extra_bytes(hkeys_b, total_bytes, old_hash, h_LE, completed_quads);
    assert equal(s128(heap5, inout_b), create(1, hash_input));      // OBSERVE

    // Compute encrypted counter
    let snap := s128(heap5, inout_b);
    Mov128(xmm0, icb);
    Pshufb(xmm0, rev_mask);
    AESEncryptBlock(alg, reverse_bytes_quad32(icb), key, round_keys, keys_b);
    aes_encrypt_LE_reveal();

    //lemma_quad32_xor_commutes(Ii, Z0);
    Pxor(save_xmm, Ii);
    Store128_buffer(heap5, io_ptr, save_xmm, 0, Secret, inout_b, 0);

    gctr_partial_reveal();
}

procedure Gcm_blocks128(
        inline alg:algorithm,
        ghost in_b:buffer128,
        ghost out_b:buffer128,
        ghost key:seq(nat32),
        ghost round_keys:seq(quad32),
        ghost keys_b:buffer128,
        ghost hkeys_b:buffer128,
        ghost h_LE:quad32)
    {:quick}
    lets in_ptr @= rax; out_ptr @= rdi; len @= rdx; keys_ptr @= r8; Xip @= r9;
         ctr @= rbx; tmp_in_ptr @= r11; tmp_out_ptr @= r10; save_reg @= r12;
         icb @= xmm11; hash @= xmm8; mask @= xmm9; one @= xmm10; 

    reads
        keys_ptr; Xip; in_ptr; mask; memLayout; heap0;

    modifies
        ctr; out_ptr; tmp_in_ptr; tmp_out_ptr; len; save_reg;
        xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; xmm7; hash; icb; one; heap1; efl;

    requires
        sse_enabled;

        // GCTR reqs
        buffers_disjoint128(keys_b, out_b);
        buffers_disjoint128(hkeys_b, out_b);
        buffers_disjoint128(in_b, out_b) || in_b == out_b;
        validSrcAddrs128(heap1,  in_ptr,  in_b, len, memLayout, Secret);
        validDstAddrs128(heap1, out_ptr, out_b, len, memLayout, Secret);
        in_ptr  + 16 * len < pow2_64;
        out_ptr + 16 * len < pow2_64;
        buffer_length(in_b) == buffer_length(out_b) /\ buffer_length(in_b) < pow2_32;
        len == buffer_length(in_b);
        mask == Mkfour(0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203);
        len < pow2_32;

        // AES reqs
        aes_reqs(alg, key, round_keys, keys_b, keys_ptr, heap0, memLayout);

        // GCM
        pclmulqdq_enabled;
        hkeys_reqs_priv(s128(heap0, hkeys_b), reverse_bytes_quad32(h_LE));
        validSrcAddrs128(heap0, Xip - 0x20, hkeys_b, 8, memLayout, Secret);
    ensures
        modifies_buffer128(out_b, old(heap1), heap1);

//        r9  ==  in_ptr + 16 * len;
//        r10 == out_ptr + 16 * len;

        // GCTR
        gctr_partial(alg, old(len), old(s128(heap1, in_b)), s128(heap1, out_b), key, old(icb));
        icb == inc32lite(old(icb), old(len));

        // GHash
        old(len) == 0 ==> hash == old(hash) /\ s128(heap1, out_b) == old(s128(heap1, out_b));
        old(len) > 0 ==> (old(len) <= length(old(s128(heap1, in_b))) ==> length(slice(old(s128(heap1, in_b)), 0, old(len))) > 0) /\
                    reverse_bytes_quad32(hash) == ghash_incremental(h_LE, reverse_bytes_quad32(old(hash)), old(s128(heap1, in_b)));
{
//    Need:
//      Xip = r9
//      rdx := len
//      rdi := in_ptr
//      xmm9 := mask
    Mov64(ctr, out_ptr);    // Save a copy of out_ptr
    Mov64(save_reg, len);   // Save a copy of len 
    Mov64(out_ptr, in_ptr); // Line up in_ptr for hashing
    Ghash_buffer(hkeys_b, in_b, h_LE, reverse_bytes_quad32(old(hash)));
    Mov64(out_ptr, ctr);    // Restore saved out_ptr
    Mov64(len, save_reg);    // Restore saved out_ptr
    Gctr_blocks128(alg, in_b, out_b, key, round_keys, keys_b);
}

procedure Gcm_blocks(
        inline alg:algorithm,
        inline offset:int,
        ghost auth_b:buffer128,
        ghost abytes_b:buffer128,
        ghost in128x6_b:buffer128,
        ghost out128x6_b:buffer128,
        ghost in128_b:buffer128,
        ghost out128_b:buffer128,
        ghost inout_b:buffer128,
        ghost iv_b:buffer128,
        ghost scratch_b:buffer128,
        ghost key:seq(nat32),
        ghost round_keys:seq(quad32),
        ghost keys_b:buffer128,
        ghost hkeys_b:buffer128)
    {:quick}
    {:options z3rlimit(1000)}
    lets
        auth_ptr @= rdi; auth_num_bytes @= rsi; auth_len @= rdx; keys_ptr @= rcx; scratch_ptr @= rbp;
        iv_ptr @= r8; Xip @= r9;
        hash @= xmm8; rev_mask @= xmm9; icb @= xmm11;

        abytes_ptr      := load_stack64(rsp + offset +  0, stack);
        in128x6_ptr     := load_stack64(rsp + offset + 8, stack);
        out128x6_ptr    := load_stack64(rsp + offset + 16, stack);
        len128x6        := load_stack64(rsp + offset + 24, stack);
        in128_ptr       := load_stack64(rsp + offset + 32, stack);
        out128_ptr      := load_stack64(rsp + offset + 40, stack);
        len128          := load_stack64(rsp + offset + 48, stack);
        inout_ptr       := load_stack64(rsp + offset + 56, stack);
        plain_num_bytes := load_stack64(rsp + offset + 64, stack);

        h_LE := reverse_bytes_quad32(old(buffer128_read(hkeys_b, 2, heap0)));
    reads
        rsp; memLayout; stack; stackTaint; heap0; heap7;

    modifies
        rax; rbx; rcx; rdx; rdi; rsi; scratch_ptr;
        r8; r9; r10; r11; r12; r13; r14; r15;
        xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; xmm7; xmm8; xmm9; xmm10; xmm11; xmm12; xmm13; xmm14; xmm15;
        heap1; heap2; heap3; heap5; heap6; efl;

    requires
        sse_enabled && movbe_enabled;

        // Valid buffers and pointers
        valid_stack_slot64(rsp + offset + 0, stack, Public, stackTaint);
        valid_stack_slot64(rsp + offset + 8, stack, Public, stackTaint);
        valid_stack_slot64(rsp + offset + 16, stack, Public, stackTaint);
        valid_stack_slot64(rsp + offset + 24, stack, Public, stackTaint);
        valid_stack_slot64(rsp + offset + 32, stack, Public, stackTaint);
        valid_stack_slot64(rsp + offset + 40, stack, Public, stackTaint);
        valid_stack_slot64(rsp + offset + 48, stack, Public, stackTaint);
        valid_stack_slot64(rsp + offset + 56, stack, Public, stackTaint);
        valid_stack_slot64(rsp + offset + 64, stack, Public, stackTaint);

        validSrcAddrs128(heap1,     auth_ptr,     auth_b, auth_len, memLayout, Secret);
        validSrcAddrs128(heap7,   abytes_ptr,   abytes_b,        1, memLayout, Secret);
        validDstAddrs128(heap2,       iv_ptr,       iv_b,        1, memLayout, Public);
        validSrcAddrs128(heap6,  in128x6_ptr,  in128x6_b, len128x6, memLayout, Secret);
        validDstAddrs128(heap6, out128x6_ptr, out128x6_b, len128x6, memLayout, Secret);
        validSrcAddrs128(heap1,    in128_ptr,    in128_b,   len128, memLayout, Secret);
        validDstAddrs128(heap1,   out128_ptr,   out128_b,   len128, memLayout, Secret);
        validDstAddrs128(heap5,    inout_ptr,    inout_b,        1, memLayout, Secret);
        validDstAddrs128(heap3,  scratch_ptr,  scratch_b,        9, memLayout, Secret);
        validSrcAddrs128(heap0,          Xip,    hkeys_b,        8, memLayout, Secret);

        buffer_disjoints128(iv_b, list(keys_b, scratch_b, in128x6_b, out128x6_b, hkeys_b, in128_b, out128_b, inout_b));
        buffer_disjoints128(scratch_b, list(keys_b, in128x6_b, out128x6_b, in128_b, out128_b, inout_b, hkeys_b));
        buffer_disjoints128(out128x6_b, list(keys_b, hkeys_b, in128_b, inout_b));
        buffer_disjoints128(out128_b, list(keys_b, hkeys_b, out128x6_b, inout_b));
        buffer_disjoints128(inout_b, list(keys_b, hkeys_b, out128x6_b, out128_b));
        buffers_disjoint128(in128x6_b, out128x6_b) || in128x6_b == out128x6_b;
        buffers_disjoint128(in128_b, out128_b) || in128_b == out128_b;

            auth_ptr + 0x10*auth_len < pow2_64;
         in128x6_ptr + 0x10*len128x6 < pow2_64;
        out128x6_ptr + 0x10*len128x6 < pow2_64;
           in128_ptr + 0x10*len128   < pow2_64;
          out128_ptr + 0x10*len128   < pow2_64;
           inout_ptr + 0x10          < pow2_64;

        buffer_length(auth_b) == auth_len;
        buffer_length(abytes_b) == 1;
        buffer_length(in128x6_b) == buffer_length(out128x6_b);
        buffer_length(in128_b) == buffer_length(out128_b);
        buffer_length(in128x6_b) == len128x6;
        buffer_length(in128_b) == len128;
        buffer_length(inout_b) == 1;
        plain_num_bytes < pow2_32;
        auth_num_bytes < pow2_32;
        Xip + 0x20 < pow2_64;

        buffer_addr(keys_b, heap0) + 0x80 < pow2_64;

        // len128x6 is # of 128-bit blocks that come in 6-block chunks
        len128x6 % 6 == 0;
        len128x6 > 0 ==> len128x6 >= 6;
        12 + len128x6 + 6 < pow2_32;

        len128x6 * (128/8) + len128 * (128/8) <= plain_num_bytes < len128x6 * (128/8) + len128 * (128/8) + 128/8;
        auth_len * (128/8) <= auth_num_bytes < auth_len * (128/8) + 128/8;

        // GCTR reqs
        aes_reqs(alg, key, round_keys, keys_b, keys_ptr, heap0, memLayout);

        // GCM reqs
        pclmulqdq_enabled;
        hkeys_reqs_priv(s128(heap0, hkeys_b), reverse_bytes_quad32(aes_encrypt_LE(alg, key, Mkfour(0,0,0,0))));

    ensures
        // Framing
        modifies_buffer128(out128_b, old(heap1), heap1);
        modifies_buffer128(iv_b, old(heap2), heap2);
        modifies_buffer128(scratch_b, old(heap3), heap3);
        modifies_buffer128(inout_b, old(heap5), heap5);
        modifies_buffer128(out128x6_b, old(heap6), heap6);

        // Semantics
        old(plain_num_bytes) < pow2_32;
        old(auth_num_bytes) < pow2_32;

        let iv_BE := old(buffer128_read(iv_b, 0, heap2));
        //let iv_BE := reverse_bytes_quad32(iv_LE);
        let ctr_BE_1:quad32 := iv_BE;
        let ctr_BE_2:quad32 := inc32(iv_BE, 1);

        // Encryption results
        let plain_in:seq(quad32) :=
            if (old(plain_num_bytes) > old((len128x6 + len128) * 128/8)) then
                append(append(old(s128(heap6, in128x6_b)),
                              old(s128(heap1, in128_b))),
                              old(s128(heap5, inout_b)))
            else
                append(old(s128(heap6, in128x6_b)),
                       old(s128(heap1, in128_b)));

        let cipher_out:seq(quad32) :=
            if (old(plain_num_bytes) > old((len128x6 + len128) * 128/8)) then
                append(append(s128(heap6, out128x6_b),
                              s128(heap1, out128_b)),
                              s128(heap5, inout_b))
            else
                append(s128(heap6, out128x6_b),
                       s128(heap1, out128_b));

        let cipher_bound:nat := if (old(plain_num_bytes) > old((len128x6 + len128) * 128/8)) then
                                old(len128x6) + old(len128) + 1
                            else
                                old(len128x6) + old(len128);
        gctr_partial(alg, cipher_bound, plain_in, cipher_out, key, ctr_BE_2);

        // Hashing results
        //let h:quad32 := reverse_bytes_quad32(buffer128_read(hkeys_b, 2, heap0));
        let length_quad:quad32 := reverse_bytes_quad32(insert_nat64(insert_nat64(Mkfour(0, 0, 0, 0), #nat64(8 * old(auth_num_bytes)), 1), #nat64(8 * old(plain_num_bytes)), 0));

        let raw_auth_quads:seq(quad32) := if (old(auth_num_bytes) > old(auth_len * 128/8)) then
                                append(old(s128(heap1, auth_b)), old(s128(heap7, abytes_b)))
                              else
                                old(s128(heap1, auth_b));
        let auth_input_bytes:seq(nat8) := slice(le_seq_quad32_to_bytes(raw_auth_quads), 0, old(auth_num_bytes));
        let padded_auth_bytes:seq(nat8) := pad_to_128_bits(auth_input_bytes);
        let auth_quad_seq:seq(quad32) := le_bytes_to_seq_quad32(padded_auth_bytes);

        let raw_quad_seq:seq(quad32) := append(
                            append(auth_quad_seq,
                                   old(s128(heap6, in128x6_b))),
                                   old(s128(heap1, in128_b)));
        let total_bytes:nat := length(auth_quad_seq) * 16 + old(plain_num_bytes);
        let raw_quad_seq:seq(quad32) :=
            if (old(plain_num_bytes) > old((len128x6 + len128) * 128/8)) then
                let ab:seq(nat8) := slice(le_seq_quad32_to_bytes(append(raw_quad_seq, old(s128(heap5, inout_b)))), 0, total_bytes) in
                let pb:seq(nat8) := pad_to_128_bits(ab) in
                le_bytes_to_seq_quad32(pb)
            else
                raw_quad_seq;
        let auth_quad_seq:seq(quad32) := append(raw_quad_seq, create(1, length_quad));
        hash == gctr_encrypt_block(ctr_BE_1, ghash_LE(h_LE, #ghash_plain_LE(auth_quad_seq)), alg, key, 0);
{
    Mov64(r13, keys_ptr);      // Save a copy, since Gcm_blocks_auth clobbers rcx
    AddLea64(Xip, Xip, 0x20);  // OpenSSL expects this pointer to be offset
    Load64_stack(rbx, rsp, offset + 0); // Load abytes_ptr
    let auth_quad_seq:seq(quad32) := Gcm_blocks_auth(auth_b, abytes_b, hkeys_b, h_LE);
    let y_0:quad32 := Mkfour(0,0,0,0);
    let y_auth_bytes:quad32 := reverse_bytes_quad32(hash);

    // TODO: Skip some steps below when len128x6 == 0

    // Line up the arguments for AES_GCM_decrypt_6mult
    Load64_stack(rdi, rsp, offset + 8);
    Load64_stack(rsi, rsp, offset + 16);
    Load64_stack(rdx, rsp, offset + 24);
    Mov64(keys_ptr, r13);     // Restore saved copy
    Mov128(xmm0, rev_mask);   // AES_GCM_encrypt_6mult expects the mask in Ii=xmm0

    let iv_BE := old(buffer128_read(iv_b, 0, heap2));
    let ctr_BE_1:quad32 := iv_BE;
    let ctr_BE_2:quad32 := inc32(iv_BE, 1);

    Load128_buffer(heap2, xmm1, iv_ptr, 0, Public, iv_b, 0);       // Load the j0 value (i.e., the result of calling compute_iv_BE)

    Store128_buffer(heap3, rbp, xmm1, 0x00, Secret, scratch_b, 0); // Save a copy, since we'll need it at the end to encrypt the hash
    ghost var j0 := xmm1;
    Load_one_lsb(xmm10);

    VPaddd(xmm1, xmm1, xmm10);

    AES_GCM_decrypt_6mult(alg, h_LE, iv_b, in128x6_b, out128x6_b, scratch_b, key, round_keys, keys_b, hkeys_b);
    let y_cipher128x6 := reverse_bytes_quad32(xmm8);
    ghost var auth_in := auth_quad_seq;
    lemma_ghash_incremental0_append(h_LE, y_0, y_auth_bytes, y_cipher128x6, auth_in, old(s128(heap6, in128x6_b)));
    auth_in := append(auth_in, old(s128(heap6, in128x6_b)));

    // Line up arguments for Gcm_blocks128 for remaining 128-bit blocks
    Load128_buffer(heap3, icb, rbp, 0x20, Secret, scratch_b, 2);
    Mov64(r8, keys_ptr);
    Load64_stack(rax, rsp, offset + 32);
    Load64_stack(rdi, rsp, offset + 40);
    Load64_stack(rdx, rsp, offset + 48);
    Mov64(r14, rdx);          // Save a copy of len128
    InitPshufbMask(rev_mask, r12);
    Pshufb(icb, rev_mask);
    Gcm_blocks128(alg, in128_b, out128_b, key, round_keys, keys_b, hkeys_b, h_LE);
    let y_cipher128 := reverse_bytes_quad32(hash);
    lemma_ghash_incremental0_append(h_LE, y_0, y_cipher128x6, y_cipher128, auth_in, old(s128(heap1, in128_b)));
    auth_in := append(auth_in, old(s128(heap1, in128_b)));
//    assert y_cipher128 == ghash_incremental0(h_LE, y_0, auth_in);

    Add64(r14, Stack(rsp, offset + 24, Public));    // r14 == len128x6 + len128
    IMul64(r14, 16);  // r14 *= 128/8;   r14 == # bytes of plain
    Load64_stack(r13, rsp, offset + 64);  // r13 := plain_num_bytes

    ghost var y_inout := y_cipher128;
    ghost var plain_byte_seq:seq(quad32) := empty_seq_quad32;
    ghost var cipher_byte_seq:seq(quad32) := empty_seq_quad32;
    gctr_partial_opaque_init(alg, plain_byte_seq, cipher_byte_seq, key, icb);

    let total_bytes := length(auth_quad_seq) * 16 + old(plain_num_bytes);
//    assert length(auth_in) == total_bytes / 16;
    if (r13 > r14) {
        // Line up arguments for Gcm_extra_bytes for the 128-bit block that holds any extra bytes
        Load64_stack(rax, rsp, offset + 56);
        Mov64(r10, r13);
        lemma_poly_bits64();
        And64(r10, 15);
//        assert r10 == old(plain_num_bytes) % 16;
//        assert r10 == total_bytes % 16;

        Gcm_extra_bytes(alg, inout_b, key, round_keys, keys_b, hkeys_b, total_bytes, y_0, auth_in, h_LE);
        y_inout := reverse_bytes_quad32(hash);

        let raw_auth_quads := append(auth_in, old(s128(heap5, inout_b)));
        let auth_input_bytes := slice(le_seq_quad32_to_bytes(raw_auth_quads), 0, total_bytes);
        let padded_auth_bytes := pad_to_128_bits(auth_input_bytes);
        auth_in := le_bytes_to_seq_quad32(padded_auth_bytes);

        plain_byte_seq := old(s128(heap5, inout_b));
        cipher_byte_seq := s128(heap5, inout_b);
    }
//    assert y_inout == ghash_incremental0(h_LE, y_0, auth_in);
//    assert gctr_partial(alg, length(plain_byte_seq), plain_byte_seq, cipher_byte_seq, key, xmm7);

    // Line up length arguments
    Mov64(r11, r15);        // r11 := auth_num_bytes
    Gcm_make_length_quad(); // expects r13 := plain_num_bytes (from above)
    let length_quad32 := reverse_bytes_quad32(xmm0);

    Ghash_register(hkeys_b, h_LE, y_inout);
    let y_final := reverse_bytes_quad32(hash);

    Load128_buffer(heap3, xmm0, rbp, 0, Secret, scratch_b, 0);       // Reload j0

    // Encrypt the hash using j0 for the IV/ctr; result goes in hash 
    Gctr_register(alg, key, round_keys, keys_b); 


    le_seq_quad32_to_bytes_of_singleton(hash);
    assert hash == gctr_encrypt_block(j0, y_final, alg, key, 0);

    // Consolidate encryption results
    let plain128 := append(old(s128(heap6, in128x6_b)), old(s128(heap1, in128_b)));
    let cipher128 := append(s128(heap6, in128x6_b), s128(heap1, in128_b));
    assert length(plain_byte_seq)  == 0 ==> equal(append( plain128,  plain_byte_seq),  plain128);
    assert length(cipher_byte_seq) == 0 ==> equal(append(cipher128, cipher_byte_seq), cipher128);

    lemma_gctr_partial_append(alg, old(len128x6), old(len128),
                              old(s128(heap6, in128x6_b)), s128(heap6, out128x6_b),
                              old(s128(heap1, in128_b)), s128(heap1, out128_b),
                              key,
                              ctr_BE_2,
                              inc32lite(ctr_BE_2, old(len128x6)));
    lemma_gctr_partial_append(alg, old(len128x6) + old(len128), length(plain_byte_seq),
                              append(old(s128(heap6, in128x6_b)), old(s128(heap1, in128_b))),
                              append(s128(heap6, out128x6_b), s128(heap1, out128_b)),
                              plain_byte_seq, cipher_byte_seq,
                              key,
                              ctr_BE_2,
                              inc32lite(inc32lite(ctr_BE_2, old(len128x6)), old(len128)));

    lemma_hash_append2(h_LE, y_0, y_inout, y_final, auth_in, length_quad32);
    auth_in := append(auth_in, create(1, length_quad32));
    ghash_incremental_to_ghash(h_LE, auth_in);
}

procedure Gcm_blocks_wrapped(
        inline alg:algorithm,
        inline offset:int,
        ghost auth_b:buffer128,
        ghost abytes_b:buffer128,
        ghost in128x6_b:buffer128,
        ghost out128x6_b:buffer128,
        ghost in128_b:buffer128,
        ghost out128_b:buffer128,
        ghost inout_b:buffer128,
        ghost iv_b:buffer128,
        ghost iv:supported_iv_LE,
        ghost scratch_b:buffer128,
        ghost key:seq(nat32),
        ghost round_keys:seq(quad32),
        ghost keys_b:buffer128,
        ghost hkeys_b:buffer128,
        ghost expected_tag:seq(nat8))
    {:quick}
    {:options z3rlimit(60)}
    lets
        auth_ptr @= rdi; auth_num_bytes @= rsi; auth_len @= rdx; keys_ptr @= rcx; scratch_ptr @= rbp;
        iv_ptr @= r8; Xip @= r9; hash @= xmm8;

        abytes_ptr      := load_stack64(rsp + offset +  0, stack);
        in128x6_ptr     := load_stack64(rsp + offset + 8, stack);
        out128x6_ptr    := load_stack64(rsp + offset + 16, stack);
        len128x6        := load_stack64(rsp + offset + 24, stack);
        in128_ptr       := load_stack64(rsp + offset + 32, stack);
        out128_ptr      := load_stack64(rsp + offset + 40, stack);
        len128          := load_stack64(rsp + offset + 48, stack);
        inout_ptr       := load_stack64(rsp + offset + 56, stack);
        plain_num_bytes := load_stack64(rsp + offset + 64, stack);

    reads
        rsp; memLayout; stack; stackTaint; heap0; heap7;

    modifies
        rax; rbx; rcx; rdx; rdi; rsi; scratch_ptr;
        r8; r9; r10; r11; r12; r13; r14; r15;
        xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; xmm7; xmm8; xmm9; xmm10; xmm11; xmm12; xmm13; xmm14; xmm15;
        heap1; heap2; heap3; heap5; heap6; efl;

    requires
        sse_enabled && movbe_enabled; 
        // Valid buffers and pointers
        valid_stack_slot64(rsp + offset + 0, stack, Public, stackTaint);
        valid_stack_slot64(rsp + offset + 8, stack, Public, stackTaint);
        valid_stack_slot64(rsp + offset + 16, stack, Public, stackTaint);
        valid_stack_slot64(rsp + offset + 24, stack, Public, stackTaint);
        valid_stack_slot64(rsp + offset + 32, stack, Public, stackTaint);
        valid_stack_slot64(rsp + offset + 40, stack, Public, stackTaint);
        valid_stack_slot64(rsp + offset + 48, stack, Public, stackTaint);
        valid_stack_slot64(rsp + offset + 56, stack, Public, stackTaint);
        valid_stack_slot64(rsp + offset + 64, stack, Public, stackTaint);

        validSrcAddrs128(heap1,     auth_ptr,     auth_b, auth_len, memLayout, Secret);
        validSrcAddrs128(heap7,   abytes_ptr,   abytes_b,        1, memLayout, Secret);
        validDstAddrs128(heap2,       iv_ptr,       iv_b,        1, memLayout, Public);
        validSrcAddrs128(heap6,  in128x6_ptr,  in128x6_b, len128x6, memLayout, Secret);
        validDstAddrs128(heap6, out128x6_ptr, out128x6_b, len128x6, memLayout, Secret);
        validSrcAddrs128(heap1,    in128_ptr,    in128_b,   len128, memLayout, Secret);
        validDstAddrs128(heap1,   out128_ptr,   out128_b,   len128, memLayout, Secret);
        validDstAddrs128(heap5,    inout_ptr,    inout_b,        1, memLayout, Secret);
        validDstAddrs128(heap3,  scratch_ptr,  scratch_b,        9, memLayout, Secret);
        validSrcAddrs128(heap0,          Xip,    hkeys_b,        8, memLayout, Secret);

        buffer_disjoints128(iv_b, list(keys_b, scratch_b, in128x6_b, out128x6_b, hkeys_b, in128_b, out128_b, inout_b));

        buffer_disjoints128(scratch_b, list(keys_b, in128x6_b, out128x6_b, in128_b, out128_b, inout_b, hkeys_b));

        buffer_disjoints128(out128x6_b, list(keys_b, hkeys_b, in128_b, inout_b));

        buffer_disjoints128(out128_b, list(keys_b, hkeys_b, out128x6_b, inout_b));

        buffer_disjoints128(inout_b, list(keys_b, hkeys_b, out128x6_b, out128_b));

        buffers_disjoint128(in128x6_b, out128x6_b) || in128x6_b == out128x6_b;
        buffers_disjoint128(in128_b, out128_b) || in128_b == out128_b;

            auth_ptr + 0x10*auth_len < pow2_64;
         in128x6_ptr + 0x10*len128x6 < pow2_64;
        out128x6_ptr + 0x10*len128x6 < pow2_64;
           in128_ptr + 0x10*len128   < pow2_64;
          out128_ptr + 0x10*len128   < pow2_64;
           inout_ptr + 0x10          < pow2_64;

        buffer_length(auth_b) == auth_len;
        buffer_length(abytes_b) == 1;
        buffer_length(in128x6_b) == buffer_length(out128x6_b);
        buffer_length(in128_b) == buffer_length(out128_b);
        buffer_length(in128x6_b) == len128x6;
        buffer_length(in128_b) == len128;
        buffer_length(inout_b) == 1;

        plain_num_bytes < pow2_32;
        auth_num_bytes < pow2_32;
        Xip + 0x20 < pow2_64;

        buffer_addr(keys_b, heap0) + 0x80 < pow2_64;

        // len128x6 is # of 128-bit blocks that come in 6-block chunks
        len128x6 % 6 == 0;
        len128x6 > 0 ==> len128x6 >= 6;
        12 + len128x6 + 6 < pow2_32;

        // 4096 * (len128x6 + len128 + 1) * 16 < pow2_32;

        len128x6 * (128/8) + len128 * (128/8) <= plain_num_bytes < len128x6 * (128/8) + len128 * (128/8) + 128/8;
        auth_len * (128/8) <= auth_num_bytes < auth_len * (128/8) + 128/8;

        // GCTR reqs
        aes_reqs(alg, key, round_keys, keys_b, keys_ptr, heap0, memLayout);

        // GCM reqs
        pclmulqdq_enabled;
        hkeys_reqs_priv(s128(heap0, hkeys_b), reverse_bytes_quad32(aes_encrypt_LE(alg, key, Mkfour(0,0,0,0))));
        let iv_BE := old(buffer128_read(iv_b, 0, heap2));
        let h_LE  := aes_encrypt_LE(alg, key, Mkfour(0, 0, 0, 0));
        iv_BE == compute_iv_BE(h_LE, iv);

    ensures
        // Framing
        modifies_buffer128(out128_b, old(heap1), heap1);
        modifies_buffer128(iv_b, old(heap2), heap2);
        modifies_buffer128(scratch_b, old(heap3), heap3);
        modifies_buffer128(inout_b, old(heap5), heap5);
        modifies_buffer128(out128x6_b, old(heap6), heap6);

        // Semantics
        old(plain_num_bytes) < pow2_32;
        old(auth_num_bytes) < pow2_32;

        let iv_BE := old(buffer128_read(iv_b, 0, heap2));

        let auth_raw_quads := old(append(s128(heap1, auth_b), s128(heap7, abytes_b)));
        let auth_bytes := slice(le_seq_quad32_to_bytes(auth_raw_quads), 0, old(auth_num_bytes));
        let plain_raw_quads := old(append(append(s128(heap6, in128x6_b), s128(heap1, in128_b)), s128(heap5, inout_b)));
        let plain_bytes := slice(le_seq_quad32_to_bytes(plain_raw_quads), 0, old(plain_num_bytes));
        let cipher_raw_quads := append(append(s128(heap6, out128x6_b), s128(heap1, out128_b)), s128(heap5, inout_b));
        let cipher_bytes := slice(le_seq_quad32_to_bytes(cipher_raw_quads), 0, old(plain_num_bytes));

        length(auth_bytes)  < pow2_32 /\
        length(plain_bytes) < pow2_32 /\
        cipher_bytes ==
            gcm_decrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), iv,
                           plain_bytes, auth_bytes, expected_tag)._1 /\
        le_quad32_to_bytes(hash) ==
            gcm_decrypt_LE_tag(alg, seq_nat32_to_seq_nat8_LE(key), iv,
                           plain_bytes, auth_bytes);
{
    Gcm_blocks(alg, offset, auth_b, abytes_b, in128x6_b, out128x6_b, in128_b, out128_b, inout_b, iv_b, scratch_b, key, round_keys, keys_b, hkeys_b);

    gcm_blocks_dec_helper_simplified(alg, key, old(s128(heap1, auth_b)), old(s128(heap7, abytes_b)),
                                     old(s128(heap6, in128x6_b)), old(s128(heap1, in128_b)), old(s128(heap5, inout_b)),
                                     s128(heap6, out128x6_b), s128(heap1, out128_b), s128(heap5, inout_b),
                                     old(plain_num_bytes), old(auth_num_bytes),
                                     iv, old(buffer128_read(iv_b, 0, heap2)),
                                     reverse_bytes_quad32(buffer128_read(hkeys_b, 2, heap0)),
                                     hash,
                                     reverse_bytes_quad32(insert_nat64(insert_nat64(Mkfour(0, 0, 0, 0), #nat64(8 * old(auth_num_bytes)), 1), #nat64(8 * old(plain_num_bytes)), 0)));

    let auth_raw_quads := old(append(s128(heap1, auth_b), s128(heap7, abytes_b)));
    let auth_bytes := slice(le_seq_quad32_to_bytes(auth_raw_quads), 0, old(auth_num_bytes));
    gcm_blocks_helper_dec_simplified(alg, key,
                                     old(s128(heap6, in128x6_b)), old(s128(heap1, in128_b)), old(s128(heap5, inout_b)),
                                     s128(heap6, out128x6_b), s128(heap1, out128_b), s128(heap5, inout_b),
                                     auth_bytes, expected_tag,
                                     old(plain_num_bytes),
                                     iv, old(buffer128_read(iv_b, 0, heap2)));

}

#verbatim{:interface}
#reset-options "--z3rlimit 100 --ifuel 0"
#endverbatim
procedure Gcm_blocks_decrypt_stdcall(
        inline win:bool,
        inline alg:algorithm,

        ghost auth_b:buffer128,
        ghost auth_bytes:nat64,
        ghost auth_num:nat64,
        ghost keys_b:buffer128,
        ghost iv_b:buffer128,
        ghost iv:supported_iv_LE,
        ghost hkeys_b:buffer128,

        ghost abytes_b:buffer128,
        ghost in128x6_b:buffer128,
        ghost out128x6_b:buffer128,
        ghost len128x6_num:nat64,
        ghost in128_b:buffer128,
        ghost out128_b:buffer128,
        ghost len128_num:nat64,
        ghost inout_b:buffer128,
        ghost cipher_num:nat64,

        ghost scratch_b:buffer128,
        ghost tag_b:buffer128,

        ghost key:seq(nat32))
    {:public}
    {:quick}
    {:exportSpecs}
    {:options z3rlimit(1600)}
    lets
        auth_ptr :=         if win then rcx else rdi;
        auth_num_bytes :=   if win then rdx else rsi;
        auth_len :=         if win then r8 else rdx;
        keys_ptr :=         if win then r9 else rcx;

        iv_ptr :=           if win then load_stack64(rsp + 32 + 8 + 0, stack) else r8;
        xip    :=           if win then load_stack64(rsp + 32 + 8 + 8, stack) else r9;

        abytes_ptr      := if win then load_stack64(rsp + 40 + 16, stack) else load_stack64(rsp + 8 + 0, stack);
        in128x6_ptr     := if win then load_stack64(rsp + 40 + 24, stack) else load_stack64(rsp + 8 + 8, stack);
        out128x6_ptr    := if win then load_stack64(rsp + 40 + 32, stack) else load_stack64(rsp + 8 + 16, stack);
        len128x6        := if win then load_stack64(rsp + 40 + 40, stack) else load_stack64(rsp + 8 + 24, stack);
        in128_ptr       := if win then load_stack64(rsp + 40 + 48, stack) else load_stack64(rsp + 8 + 32, stack);
        out128_ptr      := if win then load_stack64(rsp + 40 + 56, stack) else load_stack64(rsp + 8 + 40, stack);
        len128          := if win then load_stack64(rsp + 40 + 64, stack) else load_stack64(rsp + 8 + 48, stack);
        inout_ptr       := if win then load_stack64(rsp + 40 + 72, stack) else load_stack64(rsp + 8 + 56, stack);
        cipher_num_bytes := if win then load_stack64(rsp + 40 + 80, stack) else load_stack64(rsp + 8 + 64, stack);
        scratch_ptr     := if win then load_stack64(rsp + 40 + 88, stack) else load_stack64(rsp + 8 + 72, stack);
        tag_ptr         := if win then load_stack64(rsp + 40 + 96, stack) else load_stack64(rsp + 8 + 80, stack);

        hash @= xmm8;

    reads
        heap0; heap7;
    modifies
        rax; rbx; rcx; rdx; rdi; rsi; rsp; rbp; r8; r9; r10; r11; r12; r13; r14; r15;
        xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; xmm7; xmm8; xmm9; xmm10; xmm11; xmm12; xmm13; xmm14; xmm15;
        heap1; heap2; heap3; heap5; heap6; memLayout; efl; stack; stackTaint;
    requires
        sse_enabled && movbe_enabled;

        rsp == init_rsp(stack);
        is_initial_heap(memLayout, mem);

        // Valid buffers and pointers
        !win ==> valid_stack_slot64(rsp + 8 + 0, stack, Public, stackTaint);
        !win ==> valid_stack_slot64(rsp + 8 + 8, stack, Public, stackTaint);
        !win ==> valid_stack_slot64(rsp + 8 + 16, stack, Public, stackTaint);
        !win ==> valid_stack_slot64(rsp + 8 + 24, stack, Public, stackTaint);
        !win ==> valid_stack_slot64(rsp + 8 + 32, stack, Public, stackTaint);
        !win ==> valid_stack_slot64(rsp + 8 + 40, stack, Public, stackTaint);
        !win ==> valid_stack_slot64(rsp + 8 + 48, stack, Public, stackTaint);
        !win ==> valid_stack_slot64(rsp + 8 + 56, stack, Public, stackTaint);
        !win ==> valid_stack_slot64(rsp + 8 + 64, stack, Public, stackTaint);
        !win ==> valid_stack_slot64(rsp + 8 + 72, stack, Public, stackTaint);
        !win ==> valid_stack_slot64(rsp + 8 + 80, stack, Public, stackTaint);

        win ==> valid_stack_slot64(rsp + 40 + 0, stack, Public, stackTaint);
        win ==> valid_stack_slot64(rsp + 40 + 8, stack, Public, stackTaint);
        win ==> valid_stack_slot64(rsp + 40 + 16, stack, Public, stackTaint);
        win ==> valid_stack_slot64(rsp + 40 + 24, stack, Public, stackTaint);
        win ==> valid_stack_slot64(rsp + 40 + 32, stack, Public, stackTaint);
        win ==> valid_stack_slot64(rsp + 40 + 40, stack, Public, stackTaint);
        win ==> valid_stack_slot64(rsp + 40 + 48, stack, Public, stackTaint);
        win ==> valid_stack_slot64(rsp + 40 + 56, stack, Public, stackTaint);
        win ==> valid_stack_slot64(rsp + 40 + 64, stack, Public, stackTaint);
        win ==> valid_stack_slot64(rsp + 40 + 72, stack, Public, stackTaint);
        win ==> valid_stack_slot64(rsp + 40 + 80, stack, Public, stackTaint);
        win ==> valid_stack_slot64(rsp + 40 + 88, stack, Public, stackTaint);
        win ==> valid_stack_slot64(rsp + 40 + 96, stack, Public, stackTaint);

        auth_len == auth_num;
        auth_num_bytes == auth_bytes;
        len128x6 == len128x6_num;
        len128 == len128_num;
        cipher_num_bytes == cipher_num;

        validSrcAddrs128(mem,     auth_ptr,     auth_b, auth_len, memLayout, Secret);
        validSrcAddrs128(mem,   abytes_ptr,   abytes_b,        1, memLayout, Secret);
        validDstAddrs128(mem,       iv_ptr,       iv_b,        1, memLayout, Public);
        validSrcAddrs128(mem,  in128x6_ptr,  in128x6_b, len128x6, memLayout, Secret);
        validDstAddrs128(mem, out128x6_ptr, out128x6_b, len128x6, memLayout, Secret);
        validSrcAddrs128(mem,    in128_ptr,    in128_b,   len128, memLayout, Secret);
        validDstAddrs128(mem,   out128_ptr,   out128_b,   len128, memLayout, Secret);
        validDstAddrs128(mem,    inout_ptr,    inout_b,        1, memLayout, Secret);
        validDstAddrs128(mem,  scratch_ptr,  scratch_b,        9, memLayout, Secret);
        validSrcAddrs128(mem,          xip,    hkeys_b,        8, memLayout, Secret);
        validDstAddrs128(mem,      tag_ptr,      tag_b,        1, memLayout, Secret);

        buffer_disjoints128(tag_b, list(auth_b, abytes_b, iv_b, in128x6_b, out128x6_b, in128_b, out128_b, inout_b, scratch_b));
        buffer_disjoints128(iv_b, list(keys_b, auth_b, abytes_b, in128x6_b, out128x6_b, in128_b, out128_b, inout_b, scratch_b, hkeys_b));
        buffer_disjoints128(scratch_b, list(keys_b, auth_b, abytes_b, in128x6_b, out128x6_b, in128_b, out128_b, inout_b, hkeys_b));
        buffer_disjoints128(inout_b, list(keys_b, auth_b, abytes_b, in128x6_b, out128x6_b, in128_b, out128_b, hkeys_b));
        buffer_disjoints128(auth_b, list(keys_b, abytes_b, hkeys_b));
        buffer_disjoints128(abytes_b, list(keys_b, hkeys_b));
        buffer_disjoints128(out128x6_b, list(keys_b, auth_b, abytes_b, hkeys_b, in128_b, inout_b));
        buffer_disjoints128(in128x6_b, list(keys_b, auth_b, abytes_b, hkeys_b, in128_b, inout_b));
        buffer_disjoints128(out128_b, list(keys_b, auth_b, abytes_b, hkeys_b, in128x6_b, out128x6_b, inout_b));
        buffer_disjoints128(in128_b, list(keys_b, auth_b, abytes_b, hkeys_b, in128x6_b, out128x6_b, inout_b));
        buffers_disjoint128(in128x6_b, out128x6_b) || in128x6_b == out128x6_b;
        buffers_disjoint128(in128_b, out128_b) || in128_b == out128_b;

        auth_ptr     + 0x10*auth_len < pow2_64;
        in128x6_ptr  + 0x10*len128x6 < pow2_64;
        out128x6_ptr + 0x10*len128x6 < pow2_64;
        in128_ptr    + 0x10*len128   < pow2_64;
        out128_ptr   + 0x10*len128   < pow2_64;
        inout_ptr    + 0x10          < pow2_64;

        buffer_length(auth_b) == auth_len;
        buffer_length(abytes_b) == 1;
        buffer_length(in128x6_b) == buffer_length(out128x6_b);
        buffer_length(in128_b) == buffer_length(out128_b);
        buffer_length(in128x6_b) == len128x6;
        buffer_length(in128_b) == len128;
        buffer_length(inout_b) == 1;

        cipher_num_bytes < pow2_32;
        auth_num_bytes < pow2_32;
        xip + 0x20 < pow2_64;

        buffer_addr(keys_b, mem) + 0x80 < pow2_64;

        // len128x6 is # of 128-bit blocks that come in 6-block chunks
        len128x6 % 6 == 0;
        len128x6 > 0 ==> len128x6 >= 6;
        12 + len128x6 + 6 < pow2_32;

        len128x6 * (128/8) + len128 * (128/8) <= cipher_num_bytes < len128x6 * (128/8) + len128 * (128/8) + 128/8;
        auth_len * (128/8) <= auth_num_bytes < auth_len * (128/8) + 128/8;

        // GCTR reqs
        aes_reqs(alg, key, buffer128_as_seq(mem, keys_b), keys_b, keys_ptr, mem, memLayout);

        // GCM reqs
        pclmulqdq_enabled;
        hkeys_reqs_pub(s128(mem, hkeys_b), reverse_bytes_quad32(aes_encrypt_LE(alg, key, Mkfour(0,0,0,0))));
        let h_LE  := aes_encrypt_LE(alg, key, Mkfour(0, 0, 0, 0));
        let iv_BE := old(buffer128_read(iv_b, 0, mem));
        iv_BE == compute_iv_BE(h_LE, iv);

    ensures
        modifies_mem(loc_union(loc_buffer(iv_b),
                     loc_union(loc_buffer(scratch_b),
                     loc_union(loc_buffer(out128x6_b),
                     loc_union(loc_buffer(out128_b),
                               loc_buffer(inout_b))))), old(mem), mem);

        // Semantics
        old(cipher_num_bytes) < pow2_32;
        old(auth_num_bytes) < pow2_32;

        let iv_BE := old(buffer128_read(iv_b, 0, mem));

        let auth_raw_quads := old(append(s128(mem, auth_b), s128(mem, abytes_b)));
        let auth_bytes := slice(le_seq_quad32_to_bytes(auth_raw_quads), 0, old(auth_num_bytes));
        let cipher_raw_quads := old(append(append(s128(mem, in128x6_b), s128(mem, in128_b)), s128(mem, inout_b)));
        let cipher_bytes := slice(le_seq_quad32_to_bytes(cipher_raw_quads), 0, old(cipher_num_bytes));
        let plain_raw_quads := append(append(s128(mem, out128x6_b), s128(mem, out128_b)), s128(mem, inout_b));
        let plain_bytes := slice(le_seq_quad32_to_bytes(plain_raw_quads), 0, old(cipher_num_bytes));
        let expected_tag := old(le_quad32_to_bytes(buffer128_read(tag_b, 0, mem)));

        length(auth_bytes)  < pow2_32 /\
        length(cipher_bytes) < pow2_32 /\
        is_aes_key(alg, seq_nat32_to_seq_nat8_LE(key)) /\
        plain_bytes ==
            gcm_decrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), iv,
                           cipher_bytes, auth_bytes, expected_tag)._1 /\
        (rax = 0) ==
            gcm_decrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), iv,
                            cipher_bytes, auth_bytes, expected_tag)._2;

        // Calling convention for caller/callee saved registers
        rsp == old(rsp);

        // Windows:
        win ==> rbx == old(rbx);
        win ==> rbp == old(rbp);
        win ==> rdi == old(rdi);
        win ==> rsi == old(rsi);
        win ==> r12 == old(r12);
        win ==> r13 == old(r13);
        win ==> r14 == old(r14);
        win ==> r15 == old(r15);

        win ==> xmm6  == old(xmm6);
        win ==> xmm7  == old(xmm7);
        win ==> xmm8  == old(xmm8);
        win ==> xmm9  == old(xmm9);
        win ==> xmm10 == old(xmm10);
        win ==> xmm11 == old(xmm11);
        win ==> xmm12 == old(xmm12);
        win ==> xmm13 == old(xmm13);
        win ==> xmm14 == old(xmm14);
        win ==> xmm15 == old(xmm15);

        // Linux:
        !win ==> rbx == old(rbx);
        !win ==> rbp == old(rbp);
        !win ==> r12 == old(r12);
        !win ==> r13 == old(r13);
        !win ==> r14 == old(r14);
        !win ==> r15 == old(r15);
{
    CreateHeaplets(list(
        declare_buffer128(    auth_b, 1, Secret, Immutable),
        declare_buffer128(  abytes_b, 7, Secret, Immutable),
        declare_buffer128( in128x6_b, 6, Secret, Immutable),
        declare_buffer128(   in128_b, 1, Secret, Immutable),
        declare_buffer128(   hkeys_b, 0, Secret, Immutable),
        declare_buffer128(     tag_b, 0, Secret, Immutable),
        declare_buffer128(    keys_b, 0, Secret, Immutable),
        declare_buffer128(      iv_b, 2, Public, Mutable),
        declare_buffer128( scratch_b, 3, Secret, Mutable),
        declare_buffer128(out128x6_b, 6, Secret, Mutable),
        declare_buffer128(  out128_b, 1, Secret, Mutable),
        declare_buffer128(   inout_b, 5, Secret, Mutable)));

    lemma_hkeys_reqs_pub_priv(s128(heap0, hkeys_b), reverse_bytes_quad32(aes_encrypt_LE(alg, key, Mkfour(0,0,0,0))));
    assert win ==> valid_src_stack64(rsp + 40, stack);
    assert !win ==> valid_src_stack64(rsp + 80, stack);
    Save_registers(win);

    // Shuffle the incoming arguments around
    inline if (win)
    {
        Mov64(rdi, rcx);
        Mov64(rsi, rdx);
        Mov64(rdx, r8);
        Mov64(rcx, r9);
        assert rsp + 224 == old(rsp);
        assert valid_src_stack64(rsp + 224 + 40, stack);
        Load64_stack(r8, rsp, 224 + 40 + 0);
        Load64_stack(r9, rsp, 224 + 40 + 8);
        Load64_stack(rbp, rsp, 224 + 40 + 88);
    }
    else
    {
        assert rsp + 64 == old(rsp);
        assert valid_src_stack64(rsp + 64 + 80, stack);
        Load64_stack(rbp, rsp, 64 + 8 + 72);
    }

    Gcm_blocks_wrapped(alg,
               total_if(win, 224 + 56, 64 + 8),
               auth_b,
               abytes_b,
               in128x6_b,
               out128x6_b,
               in128_b,
               out128_b,
               inout_b,
               iv_b,
               iv,
               scratch_b,
               key,
               buffer128_as_seq(old(heap0), keys_b),
               keys_b,
               hkeys_b,
               old(le_quad32_to_bytes(buffer128_read(tag_b, 0, heap0)))
               );

    // Auth tag is still in hash (xmm8), so load it for comparison purposes
    Load64_stack(r15, rsp, total_if(win, 224 + 40 + 96, 64 + 8 + 80));
    Load128_buffer(heap0, xmm0, r15, 0, Secret, tag_b, 0);
    assert xmm0 == buffer128_read(tag_b, 0, heap0);       // OBSERVE?
    assert xmm0 == buffer128_read(tag_b, 0, old(heap0));  // OBSERVE?
    let alleged_tag_quad := xmm0;
    let computed_tag := hash;
    XmmEqual(xmm0, hash);

    let auth_raw_quads := old(append(s128(heap1, auth_b), s128(heap7, abytes_b)));
    let auth_bytes := slice(le_seq_quad32_to_bytes(auth_raw_quads), 0, old(auth_num_bytes));
    let cipher_raw_quads := old(append(append(s128(heap6, in128x6_b), s128(heap1, in128_b)), s128(heap5, inout_b)));
    let cipher_bytes := slice(le_seq_quad32_to_bytes(cipher_raw_quads), 0, old(cipher_num_bytes));
    decrypt_helper(alg, seq_nat32_to_seq_nat8_LE(key), iv, cipher_bytes, auth_bytes, rax, alleged_tag_quad, computed_tag);
    // Proves:
//    assert (rax = 0) ==
//            gcm_decrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(iv_BE),
//                            cipher_bytes, auth_bytes, old(le_quad32_to_bytes(buffer128_read(tag_b, 0, heap0))))._2;
    // Save a copy of rax, since Restore_registers clobbers it.  TODO: avoid this.
    Mov64(rcx, rax);
    Restore_registers(win, old(rsp), old(xmm6), old(xmm7), old(xmm8), old(xmm9), old(xmm10), old(xmm11), old(xmm12), old(xmm13), old(xmm14), old(xmm15));
    Mov64(rax, rcx);

    DestroyHeaplets();
}
