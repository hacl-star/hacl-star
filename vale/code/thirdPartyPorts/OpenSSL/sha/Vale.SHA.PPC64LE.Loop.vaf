include "../../../arch/ppc64le/Vale.PPC64LE.InsBasic.vaf"
include "../../../arch/ppc64le/Vale.PPC64LE.InsMem.vaf"
include "../../../arch/ppc64le/Vale.PPC64LE.InsVector.vaf"
include "../../../arch/ppc64le/Vale.PPC64LE.InsStack.vaf"
include "Vale.SHA.PPC64LE.Rounds.vaf"

include{:fstar}{:open} "FStar.Seq.Base"
include{:fstar}{:open} "FStar.Seq.Properties"

include{:fstar}{:open} "Vale.Def.Words_s"
include{:fstar}{:open} "Vale.Def.Types_s"
include{:fstar}{:open} "Vale.Def.Words.Seq_s"
include{:fstar}{:open} "Vale.Arch.Types"
include{:fstar}{:open} "Spec.SHA2"
include{:fstar}{:open} "Vale.SHA.PPC64LE.SHA_helpers"
include{:fstar}{:open} "Spec.Agile.Hash"
include{:fstar}{:open} "Spec.Hash.Definitions"
include{:fstar}{:open} "Vale.PPC64LE.Machine_s"
include{:fstar}{:open} "Vale.PPC64LE.State"
include{:fstar}{:open} "Vale.PPC64LE.Decls"
include{:fstar}{:open} "Vale.PPC64LE.QuickCode"
include{:fstar}{:open} "Spec.Loops"
include{:fstar}{:open} "Vale.SHA2.Wrapper"

module Vale.SHA.PPC64LE.Loop

#verbatim{:interface}{:implementation}
open Vale.Def.Opaque_s
open Vale.Def.Types_s
open Vale.Def.Words_s
open Vale.Def.Words.Seq_s
open FStar.Seq
open Vale.Arch.Types
open Vale.Arch.HeapImpl
open Vale.PPC64LE.Machine_s
open Vale.PPC64LE.Memory
open Vale.PPC64LE.Stack_i
open Vale.PPC64LE.State
open Vale.PPC64LE.Decls
open Vale.PPC64LE.QuickCode
open Vale.PPC64LE.QuickCodes
open Vale.PPC64LE.InsBasic
open Vale.PPC64LE.InsMem
open Vale.PPC64LE.InsStack
open Vale.PPC64LE.InsVector
open Vale.SHA.PPC64LE.SHA_helpers
open Spec.SHA2
open Spec.Agile.Hash
open Spec.Hash.Definitions
open Spec.Loops
open Vale.SHA.PPC64LE.Rounds
open Vale.SHA2.Wrapper
#reset-options "--z3rlimit 2000"
#endverbatim

procedure Loop_prologue(ghost in_b:buffer128, ghost offset:nat, ghost k_b:buffer128, ghost block:block_w, ghost hash_orig:hash256)
    {:quick}
    lets
        inp @= r4; tbl @= r6; msg0 @= v0; h_vec @= v23; Wi @= v24;
    reads
        heap0; memLayout;
    modifies
        inp; tbl; msg0; h_vec; Wi;
    requires
        let hash := #(seq(Vale.SHA.PPC64LE.SHA_helpers.word))(repeat_range_vale(0, block, hash_orig));
        validSrcAddrsOffset128(heap0, inp, in_b, offset, 1, memLayout, Secret);
        validSrcAddrs128(heap0, tbl, k_b, 1, memLayout, Secret);
        inp + 16 < pow2_64;
        tbl + 16 < pow2_64;
        h_vec.hi3 == word_to_nat32(index(hash, 7));
    ensures
        let ks := buffer128_read(k_b, 0, heap0);
        let hash := #(seq(Vale.SHA.PPC64LE.SHA_helpers.word))(repeat_range_vale(0, block, hash_orig));
        msg0 == reverse_bytes_quad32(buffer128_read(in_b, offset, heap0));
        inp == old(inp) + 16;
        tbl == old(tbl) + 16;
        h_vec.hi3 == add_wrap32(word_to_nat32(index(hash, 7)), ks.lo0);
        Wi.hi3 == ks.lo1 && Wi.hi2 == ks.hi2 && Wi.lo1 == ks.hi3;
{
    Load128_byte16_buffer(heap0, msg0, inp, Secret, in_b, offset);
    Load128_word4_buffer(heap0, Wi, tbl, Secret, k_b, 0);
    AddImm(inp, inp, 16);
    AddImm(tbl, tbl, 16);
    Vadduwm(h_vec, h_vec, Wi);
    Vsldoi(Wi, Wi, Wi, 4);
}

procedure Loop_rounds(
        ghost in_b:buffer128,
        ghost k_b:buffer128,
        ghost offset:nat,
        ghost hash_orig:hash256)
    {:quick}
    lets
        inp @= r4; tbl @= r6;
        a_vec @= v16; b_vec @= v17; c_vec @= v18; d_vec @= v19;
        e_vec @= v20; f_vec @= v21; g_vec @= v22; h_vec @= v23;
        Wi @= v24; tmp_vec @= v25; tmp_vec2 @= v26;
    reads
        heap0; memLayout;
    modifies
        inp; tbl; v0; v1; v2; v3; v4; v5; v6; v7; v8; v9; v10; v11; v12; v13; v14; v15; a_vec; b_vec; c_vec; d_vec; e_vec; f_vec; g_vec; h_vec; Wi; tmp_vec; tmp_vec2; v28; v29; v30; v31;
    requires
        validSrcAddrsOffset128(heap0, inp, in_b, offset, 4, memLayout, Secret);
        validSrcAddrs128(heap0, tbl,    k_b, 16, memLayout, Secret);
        validSrcAddrsOffset128(heap0, tbl, k_b, 13, 3, memLayout, Secret);
        k_reqs(buffer128_as_seq(heap0, k_b));
        let input_LE := slice(buffer128_as_seq(heap0, in_b), 0, offset) in
        let input_BE := reverse_bytes_quad32_seq(input_LE) in
        make_seperated_hash_quad32(a_vec, b_vec, c_vec, d_vec, e_vec, f_vec, g_vec, h_vec) == update_multi_quads(input_BE, hash_orig);
        inp + 64 < pow2_64;
        tbl + 256 < pow2_64;
    ensures
        tbl == old(tbl);
        inp == old(inp) + 64;
        let block:block_w := quads_to_block_be(reverse_bytes_quad32_seq(slice(buffer128_as_seq(heap0, in_b), offset, offset+4)));
        make_seperated_hash_quad32(a_vec, b_vec, c_vec, d_vec, e_vec, f_vec, g_vec, h_vec) == update_block(hash_orig, block);
        let input_LE := slice(buffer128_as_seq(heap0, in_b), 0, offset + 4) in
        let input_BE := reverse_bytes_quad32_seq(input_LE) in
        make_seperated_hash_quad32(a_vec, b_vec, c_vec, d_vec, e_vec, f_vec, g_vec, h_vec) == update_multi_quads(input_BE, hash_orig);
{
    let input_LE := slice(buffer128_as_seq(heap0, in_b), offset, offset+4);
    let input_BE := reverse_bytes_quad32_seq(input_LE);
    let block:block_w := quads_to_block_be(input_BE);

    Xxmrghd(v28, a_vec, e_vec);
    Xxmrghd(v29, b_vec, f_vec);
    Xxmrghd(v30, c_vec, g_vec);
    Xxmrghd(v31, d_vec, h_vec);
    
    Loop_prologue(in_b, offset, k_b, block, hash_orig);
    assert v0 == index(input_BE, 0);
    
    Loop_rounds_0_15(in_b, offset, k_b, block, hash_orig, input_BE);
    Loop_rounds_16_47(16, k_b, block, hash_orig);
    Loop_rounds_16_47(32, k_b, block, hash_orig);
    Loop_rounds_48_63(k_b, block, hash_orig);
    SubImm(tbl, tbl, 256);

    let a_shuffle := a_vec;
    let b_shuffle := b_vec;
    let c_shuffle := c_vec;
    let d_shuffle := d_vec;
    let e_shuffle := e_vec;
    let f_shuffle := f_vec;
    let g_shuffle := g_vec;
    let h_shuffle := h_vec;

    Vsldoi(v0, v28, v28, 8);
    Vsldoi(v1, v29, v29, 8);
    Vsldoi(v2, v30, v30, 8);
    Vsldoi(v3, v31, v31, 8);
    Vadduwm(a_vec, a_vec, v28);
    Vadduwm(b_vec, b_vec, v29);
    Vadduwm(c_vec, c_vec, v30);
    Vadduwm(d_vec, d_vec, v31);
    Vadduwm(e_vec, e_vec, v0);
    Vadduwm(f_vec, f_vec, v1);
    Vadduwm(g_vec, g_vec, v2);
    Vadduwm(h_vec, h_vec, v3);

    update_lemma(a_shuffle, b_shuffle, c_shuffle, d_shuffle, e_shuffle, f_shuffle, g_shuffle, h_shuffle, old(a_vec), old(b_vec), old(c_vec), old(d_vec), old(e_vec), old(f_vec), old(g_vec), old(h_vec), a_vec, b_vec, c_vec, d_vec, e_vec, f_vec, g_vec, h_vec, block);
}

procedure Mod_cr0()
    {:quick}
    modifies
        cr0;
{}

procedure Loop(ghost in_b:buffer128, ghost k_b:buffer128)
    {:quick}
    {:public}
    lets
        inp @= r4; num @= r5; tbl @= r6;
        a_vec @= v16; b_vec @= v17; c_vec @= v18; d_vec @= v19;
        e_vec @= v20; f_vec @= v21; g_vec @= v22; h_vec @= v23;
    reads
        heap0; memLayout;
    modifies
        inp; tbl; num; cr0;
        v0; v1; v2; v3; v4; v5; v6; v7; v8; v9; v10; v11; v12; v13; v14; v15; a_vec; b_vec; c_vec; d_vec; e_vec; f_vec; g_vec; h_vec; v24; v25; v26; v28; v29; v30; v31;
    requires
        validSrcAddrs128(heap0, inp,   in_b,  4*num, memLayout, Secret);
        validSrcAddrs128(heap0, tbl,    k_b, 16, memLayout, Secret);
        validSrcAddrsOffset128(heap0, tbl, k_b, 13, 3, memLayout, Secret);
        inp + 0x40*num < pow2_64;
        tbl + 256 < pow2_64;
        k_reqs(buffer128_as_seq(heap0, k_b));
    ensures
        inp == old(inp) + 0x40*old(num);
        num == 0;
        let input_LE := slice(buffer128_as_seq(heap0, in_b), 0, 4*old(num)) in
        let input_BE := reverse_bytes_quad32_seq(input_LE) in
        make_seperated_hash_quad32(a_vec, b_vec, c_vec, d_vec, e_vec, f_vec, g_vec, h_vec) == update_multi_quads(input_BE, old(make_seperated_hash_quad32(a_vec, b_vec, c_vec, d_vec, e_vec, f_vec, g_vec, h_vec)));
{
    let hash_orig:hash256 := make_seperated_hash_quad32(a_vec, b_vec, c_vec, d_vec, e_vec, f_vec, g_vec, h_vec);
    
    ghost var count:nat := 0;
    while (num > 0)
        invariant
            validSrcAddrs128(heap0, old(inp),   in_b,  4*old(num), memLayout, Secret);
            validSrcAddrs128(heap0,      tbl,    k_b,          16, memLayout, Secret);
            validSrcAddrsOffset128(heap0, tbl, k_b, 13, 3, memLayout, Secret);

            old(inp) + 0x40*old(num) < pow2_64;
            tbl + 256 < pow2_64;

            num == old(num) - count;
            inp == old(inp) + 0x40 * count;

            k_reqs(buffer128_as_seq(heap0, k_b));

            let input_LE := slice(buffer128_as_seq(heap0, in_b), 0, count*4) in
            let input_BE := reverse_bytes_quad32_seq(input_LE) in
            make_seperated_hash_quad32(a_vec, b_vec, c_vec, d_vec, e_vec, f_vec, g_vec, h_vec) == update_multi_quads(input_BE, hash_orig);
        decreases num;
    {
        Mod_cr0();
        Loop_rounds(in_b, k_b, 4*count, hash_orig);
        SubImm(num, num, 1);
        count := count + 1;
    }
}
